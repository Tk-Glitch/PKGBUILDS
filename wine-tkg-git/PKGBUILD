# Created by: Tk-Glitch <ti3nou at gmail dot com>

pkgname=wine-tkg-git
pkgver=4.4.r7.gd963a250

# workaround for pkgrel overwritten on regen
pkgrel=1
eval pkgrel=140

_winesrcdir='wine-git'
_stgsrcdir='wine-staging-git'
_esyncsrcdir='esync'
_dxvksrcdir='dxvk'
_dxupsrcdir='dxup'
_where=$PWD # track basedir as different Arch based distros are moving srcdir around
_configure_args=() # additional args to ./configure will be added during prepare()

cp "$_where"/wine-tkg-patches/* "$_where" # copy patches inside the PKGBUILD's dir to preserve makepkg sourcing and md5sum checking
cp "$_where"/wine-tkg-userpatches/*.my* "$_where" # copy userpatches inside the PKGBUILD's dir

source "$_where"/customization.cfg # load default configuration from file

# Load external configuration file if present. Available variable values will overwrite customization.cfg ones.
if [ -e "$_EXT_CONFIG_PATH" ]; then
  source "$_EXT_CONFIG_PATH" && msg2 "External configuration file $_EXT_CONFIG_PATH will be used to override customization.cfg values." && msg2 ""
fi

# Load preset configuration file if present and selected. All values will overwrite customization.cfg ones.
if [ -n "$_LOCAL_PRESET" ] && [ -e "$_where"/wine-tkg-profiles/wine-tkg-"$_LOCAL_PRESET".cfg ]; then
  source "$_where"/wine-tkg-profiles/wine-tkg-"$_LOCAL_PRESET".cfg && msg2 "Preset configuration $_LOCAL_PRESET will be used to override customization.cfg values." && msg2 ""
fi

if [ "$_NOINITIALPROMPT" == "true" ] || [ -n "$_LOCAL_PRESET" ]; then
  msg2 'Initial prompt skipped. Do you remember what it said? 8)'
else
  # If the state tracker isn't found, prompt the user with useful stuff.
  # This is to prevent the prompt to come back until packaging is done
  if [ ! -e "$_where"/BIG_UGLY_FROGMINER ]; then
    msg2 '#################################################################'
    msg2 ''
    msg2 'You can configure your wine build flavour (right now for example)'
    if [ -e "$_EXT_CONFIG_PATH" ]; then
      msg2 "by editing the $_EXT_CONFIG_PATH file."
      msg2 ''
      msg2 'In case you are only using a partial config file, remaining'
      msg2 'values will be loaded from the customization.cfg file next to'
      msg2 'this PKGBUILD.'
    else
      msg2 'by editing the customization.cfg file next to this PKGBUILD,'
      msg2 'or by creating a custom config, for example'
      msg2 '~/.config/frogminer/wine-tkg.cfg (path set in config file)'
      msg2 'to override some or all of its values.'
    fi
    msg2 ''
    msg2 'Set _LOCAL_OPTIMIZED to "false" if you want to share the package !'
    msg2 ''
    msg2 "Current path is '$_where'"
    msg2 ''
    msg2 'If you are rebuilding using the same configuration, you may want'
    msg2 'to delete/move previously built package if in the same dir.'
    msg2 ''
    msg2 '###################################TkG##########was##########here'
    read -rp "When you are ready, press enter to continue."

    if [ -e "$_EXT_CONFIG_PATH" ]; then
      source "$_EXT_CONFIG_PATH" && msg2 "External config loaded" # load external configuration from file again, in case of changes.
    else
      source "$_where"/customization.cfg # load configuration from file again, in case of changes.
    fi
  fi
fi

function exit_cleanup {
if [ -e "$_where"/BIG_UGLY_FROGMINER ] && [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" == "proton" ]; then
  echo "_protontkg_version=${pkgver}" > "$_where"/../proton-tkg/proton_tkg_token
fi

rm -f "$_where"/BIG_UGLY_FROGMINER && msg2 'Removed BIG_UGLY_FROGMINER - Ribbit' # state tracker end

if [ "$_NUKR" == "true" ]; then
  # Sanitization
  rm -rf "$srcdir"/"$_esyncsrcdir"
  rm -rf "$srcdir"/*.patch
  rm -rf "$srcdir"/*.tgz
  rm -rf "$srcdir"/*.conf
  msg2 'exit cleanup done'
fi

  # Remove temporarily copied patches
  rm -rf "$_where"/*.patch
  rm -rf "$_where"/*.my*
  rm -rf "$_where"/*.conf

  remove_deps
}

# Check for proton-tkg token to prevent broken state
if [ -e ../proton-tkg/proton_tkg_token ]; then
  _EXTERNAL_INSTALL="true"
  _EXTERNAL_INSTALL_TYPE="proton"
  _EXTERNAL_NOVER="false"
  _use_dxvk="true"
  _dxvk_dxgi="true"
  _use_faudio="true"
  _use_libfonts="true"
elif [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" == "proton" ]; then
  error "It looks like you're attempting to build a Proton version of wine-tkg-git."
  error "This special option doesn't use pacman and requires you to run 'proton-tkg.sh' script from proton-tkg dir."
  exit_cleanup
  exit
fi

if [ -n "$_PKGNAME_OVERRIDE" ]; then
  if [ "$_PKGNAME_OVERRIDE" == "none" ]; then
    pkgname="${pkgname}"
  else
    pkgname="${pkgname}-${_PKGNAME_OVERRIDE}"
  fi
  msg2 "Overriding default pkgname. New pkgname: ${pkgname}"
else
  if [ "$_use_staging" == "true" ]; then
    pkgname="${pkgname/%-git/-staging-git}"
    msg2 "Using staging patchset"
  fi

  if [ "$_use_esync" == "true" ]; then
    pkgname="${pkgname/%-git/-esync-git}"
    msg2 "Using esync patchset"
  fi

  if [ "$_use_pba" == "true" ]; then
#    pkgname="${pkgname/%-git/-pba-git}"
    msg2 "Using pba patchset"
  fi

  if [ "$_use_legacy_gallium_nine" == "true" ]; then
    pkgname="${pkgname/%-git/-nine-git}"
    msg2 "Using gallium nine patchset (legacy)"
  fi

  if [ "$_use_vkd3d" == "true" ]; then
    if [ "$_use_dxvk" == "true" ] && [ "$_dxvk_dxgi" != "true" ] || [ "$_use_dxvk" != "true" ]; then
      pkgname="${pkgname/%-git/-vkd3d-git}"
      msg2 "Using VKD3D for d3d12 translation"
    else
      msg2 "VKD3D force disabled as it requires wine's dxgi instead of DXVK's !"
    fi
  fi

  if [ "$_use_dxvk" == "true" ] && [ "$_use_dxup" == "true" ]; then
    pkgname="${pkgname/%-git/-dxvk+up-git}"
    msg2 "Using DXUP for d3d9 and DXVK for d3d10 and d3d11 translation (winelibs)"
  fi

  if [ "$_use_dxvk" == "true" ] && [ "$_use_dxup" != "true" ]; then
    pkgname="${pkgname/%-git/-dxvk-git}"
    msg2 "Using DXVK winelib for d3d10 and d3d11 translation"
  fi

  if [ "$_use_faudio" == "true" ]; then
    pkgname="${pkgname/%-git/-faudio-git}"
    msg2 "Using Faudio for xaudio2"
  fi

  if [ -n "$_OPTIONAL_MARCHFLAG" ]; then
    pkgname="${pkgname/%-git/-marchopt-git}"
    msg2 "Using -march=$_OPTIONAL_MARCHFLAG"
  fi
fi

# External install
if [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" != "proton" ]; then
  pkgname="${pkgname/%-git/-$_EXTERNAL_INSTALL_TYPE-git}"
  if [ "$_EXTERNAL_INSTALL_TYPE" == "lutris" ]; then
    _DEFAULT_EXTERNAL_PATH=$_LUTRIS_RUNNERS_PATH
  fi
  msg2 "Installing to $_DEFAULT_EXTERNAL_PATH/$pkgname"
elif [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" == "proton" ]; then
  pkgname="proton_dist"
  _DEFAULT_EXTERNAL_PATH="$HOME/.steam/root/compatibilitytools.d"
  msg2 "Installing to $_DEFAULT_EXTERNAL_PATH/proton_tkg"
fi

# custom plain wine commit to pass to git
if [ "$_use_staging" == "false" ] && [ -n "$_plain_version" ]; then
  _plain_commit="#commit=$_plain_version"
fi

# custom staging commit to pass to git
if [ "$_use_staging" == "true" ] && [ -n "$_staging_version" ]; then
  _staging_commit="#commit=$_staging_version"
fi

# custom dxvk commit to pass to git
if [ "$_use_dxvk" == "true" ]; then
  _dxvk_commit="#commit=$_dxvk_version"
fi

pkgdesc='This "Wine to rule them all" package is the result of some random pkgbuild found online. Looks safe to me, amirite? Some variants of it can be found in lutris runners.'
url='https://github.com/Tk-Glitch/PKGBUILDS/tree/master/wine-tkg-git'
arch=('x86_64')

if pacman -Qq ccache &> /dev/null; then
  msg2 'ccache was found and will be used'
  options=('staticlibs' 'ccache')
else
  msg2 'ccache was not found and will not be used'
  options=('staticlibs')
fi

license=('LGPL')
depends=(
    'attr'                  'lib32-attr'
    'fontconfig'            'lib32-fontconfig'
    'lcms2'                 'lib32-lcms2'
    'libxml2'               'lib32-libxml2'
    'libxcursor'            'lib32-libxcursor'
    'libxrandr'             'lib32-libxrandr'
    'libxdamage'            'lib32-libxdamage'
    'libxi'                 'lib32-libxi'
    'gettext'               'lib32-gettext'
    'freetype2'             'lib32-freetype2'
    'glu'                   'lib32-glu'
    'libsm'                 'lib32-libsm'
    'gcc-libs'              'lib32-gcc-libs'
    'libpcap'               'lib32-libpcap'
    'desktop-file-utils'
)
makedepends=('git' 'autoconf' 'ncurses' 'bison' 'perl' 'fontforge' 'flex'
    'gcc>=4.5.0-2'
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'gnutls'                'lib32-gnutls'
    'libxinerama'           'lib32-libxinerama'
    'libxcomposite'         'lib32-libxcomposite'
    'libxmu'                'lib32-libxmu'
    'libxxf86vm'            'lib32-libxxf86vm'
    'libldap'               'lib32-libldap'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'alsa-lib'              'lib32-alsa-lib'
    'libxcomposite'         'lib32-libxcomposite'
    'mesa'                  'lib32-mesa'
    'libgl'                 'lib32-libgl'
    'libxslt'               'lib32-libxslt'
    'libpulse'              'lib32-libpulse'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'samba'                 'schedtool'
    'meson'                 'ninja'
    'glslang'               'wget'
    'ocl-icd'               'lib32-ocl-icd'
    'opencl-headers'
)
# We need wine installed to build DXVK winelib
if [ "$_use_dxvk" == "true" ]; then
  makedepends=("${makedepends[@]}" wine)
fi

# vkd3d deps
if [ "$_use_vkd3d" == "true" ]; then
  if [ "$_use_dxvk" == "true" ] && [ "$_dxvk_dxgi" != "true" ] || [ "$_use_dxvk" != "true" ]; then
    makedepends=("${makedepends[@]}" vkd3d lib32-vkd3d)
  fi
fi

# faudio deps
if [ "$_use_faudio" == "true" ]; then
  makedepends=("${makedepends[@]}" faudio lib32-faudio)
fi

# liberation fonts deps
if [ "$_use_libfonts" == "true" ]; then
  depend=("${depend[@]}" fontforge python-fonttools)
fi

optdepends=(
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'libldap'               'lib32-libldap'
    'gnutls'                'lib32-gnutls'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'libpulse'              'lib32-libpulse'
    'alsa-plugins'          'lib32-alsa-plugins'
    'alsa-lib'              'lib32-alsa-lib'
    'libjpeg-turbo'         'lib32-libjpeg-turbo'
    'libxcomposite'         'lib32-libxcomposite'
    'libxinerama'           'lib32-libxinerama'
    'ncurses'               'lib32-ncurses'
    'libxslt'               'lib32-libxslt'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'cups'                  'zapcc'
    'samba'                 'clang'
    'dosbox'                'ccache'
    'faudio'                'lib32-faudio'
)
source=("$_winesrcdir"::"git://source.winehq.org/git/wine.git${_plain_commit}"
		"$_stgsrcdir"::"git+https://github.com/wine-staging/wine-staging.git${_staging_commit}"
		"$_dxvksrcdir"::"git+https://github.com/doitsujin/dxvk.git${_dxvk_commit}"
		"$_dxupsrcdir"::"git+https://github.com/Joshua-Ashton/dxup.git#branch=d3d9-dev"
		# game specific
		'poe-fix.patch' # Enable Path of Exile DX11 to work
		'f4skyrimse-fix.patch' # Fo4 & Skyrim SE Script Extender fix
		'fortnite.patch' # Fortnite crashfix - Doesn't fix EAC/BE
		'mtga.patch' # Magic The Gathering: Arena crashfix
		'sims_2-fix-legacy.patch' # Sims 2 fix for <4.1
		'sims_2-fix-4.2-.patch' # Sims 2 fix for 4.2 and lower
		'sims_2-fix.patch' # Sims 2 fix for 4.3+
		'sims_3-oldnvidia.patch' # No.
		'mwo.patch' # Mechwarrior Online fix
		'pythonfix.patch' # Backported Python/Sims4 squash patch for <=3.18
		'resident_evil_4_hack.patch' # Fixes broken rendering
		'woff-hack.patch' # Hack for child window rendering support for vk - Fixes World of Final Fantasy
		# esync
		'esync-staging-fixes-r1.patch' # For 3.10-3.16 - Untested on lower than 3.10
		'esync-staging-fixes-r2.patch' # For 3.17+
		'esync-staging-fixes-r3.patch' # For 3.20+
		'esync-compat-fixes-r1.patch'  # For 3.10-3.16 - Untested on lower than 3.10
		'esync-compat-fixes-r1.1.patch' # Addon for 3.14-3.16
		'esync-compat-fixes-r2.patch' # For 3.17+
		'esync-compat-fixes-r2.1.patch' # Addon for 3.19+ - non-staging only
		'esync-compat-fixes-r3.patch' # For 3.20+
		'esync-compat-fixes-r3.1.patch' # Addon for 4.4+
		'esync-no_alloc_handle.patch' # esync staging extended support patch
		# pba
		'PBA313-.patch' # For 3.10-3.13 - Untested on lower than 3.10
		'PBA314+.patch' # For 3.14-3.16
		'PBA317+.patch' # For 3.17-3.18
		# misc
		'steam.patch' # auto-append --no-sandbox
		'30-win32-aliases.conf' # 32-bit font antialiasing
		'use_clock_monotonic.patch' # Perf
		'lowlatency_audio.patch' # wine osu! lowlat patch
		'wine-binfmt.conf' # Enables launching windows executables directly
		'CSMT-toggle.patch' # Corrected CSMT switch logic
		'GLSL-toggle.patch' # Toggles OpenGL shading language
		'launch-with-dedicated-gpu-desktop-entry.patch'
		'plasma_systray_fix.patch' # Systray fix for winex11
		'dxvk-winelib.patch' # Enables DXVK winelib building
		'dxup-winelib.patch' # Enables DXUP winelib building
		'FS_bypass_compositor.patch' # Perf
		'faudio-exp.patch' # Faudio experimental support
		'valve_proton_fullscreen_hack-staging.patch' # Proton FS hack
		'valve_proton_fullscreen_hack-staging-4.4.patch' # Proton FS hack for <=4.4
		'valve_proton_fullscreen_hack-staging-legacy.patch' # Proton FS hack for <=3.16 masochists
		'enable_stg_shared_mem_def.patch' # Enable STAGING_SHARED_MEMORY by default
		'LAA-legacy.patch' # IMAGE_FILE_LARGE_ADDRESS_AWARE override (<4.2)
		'LAA-staging-legacy.patch' # Same as above, for staging
		'LAA.patch' # IMAGE_FILE_LARGE_ADDRESS_AWARE override
		'LAA-staging.patch' # Same as above, for staging
		'winevulkan-1.1.103.patch' # Update winevulkan
		'proton-tkg.patch' # Proton-tkg,
		'dxvk-async.patch' # DXVK async patch
)

if [ "$_EXTERNAL_INSTALL" == "true" ]; then
  provides=(
    "$pkgname=$pkgver"
  )
  conflicts=("$pkgname")
else
  provides=(
    "wine=$pkgver"
    "wine-wow64=$pkgver"
    "wine-staging=$pkgver"
    "wine-esync=$pkgver"
  )
  conflicts=('wine' 'wine-wow64' 'wine-staging' 'wine-esync')
fi

makedepends=("${makedepends[@]}" "${depends[@]}")
install=wine.install

user_patcher() {
	# To patch the user because all your base are belong to us
	if [[ $(find "$_where" -name "*.${_userpatch_ext}patch") ]]; then
	  if [ "$_user_patches_no_confirm" != "true" ]; then
	  read -rp "At least one of your own ${_userpatch_target} patches were found (*.${_userpatch_ext}patch). Do you want to install it/them? - Be careful with that ;)"$'\n> N/y : ' _CONDITION;
	  fi
	  if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
	    for _f in "$_where"/*.${_userpatch_ext}patch; do
	    if [ -e "${_f}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Applying your own ${_userpatch_target} patch ${_f}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 < "${_f}"
	      echo "Applied your own patch ${_f}" >> "$_where"/last_build_config.log
	    fi
	    done
	  fi
	fi
	if [[ $(find "$_where" -name "*.${_userpatch_ext}revert") ]]; then
	  if [ "$_user_patches_no_confirm" != "true" ]; then
	  read -rp "At least one of your own ${_userpatch_target} 'to revert' patches were found (*.${_userpatch_ext}revert). Do you want to install it/them? - Be careful with that ;)"$'\n> N/y : ' _CONDITION;
	  fi
	  if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
	    for _f in "$_where"/*.${_userpatch_ext}revert; do
	    if [ -e "${_f}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Reverting your own ${_userpatch_target} patch ${_f}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 -R < "${_f}"
	      echo "Reverted your own patch ${_f}" >> "$_where"/last_build_config.log
	    fi
	    done
	  fi
	fi
}

nonuser_patcher() {
  msg2 "Applying ${_patchname}" && patch -Np1 < ../"$_patchname" && echo "${_patchmsg}" >> "$_where"/last_build_config.log
}

_describe_wine() {
  git describe --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g;s/^v//;s/\.rc/rc/;s/^wine\.//'
}

pkgver() {
	if [ "$_use_staging" == "true" ]; then
	  cd "${srcdir}/${_stgsrcdir}"
	else
	  cd "${srcdir}/${_winesrcdir}"
	fi

	# retrieve current wine version - if staging is enabled, staging version will be used instead
	_describe_wine
}

prepare() {
	# state tracker start - FEAR THE MIGHTY FROG MINER
	touch "${_where}"/BIG_UGLY_FROGMINER

	cd "${srcdir}"/"${_stgsrcdir}"

	# restore the targetted trees to their git origin state
	# for the patches not fail on subsequent aborted builds
	msg2 'Cleaning wine-staging source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	cd "${srcdir}"/"${_dxvksrcdir}"

	msg2 'Cleaning dxvk source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	cd "${srcdir}"/"${_dxupsrcdir}"

	msg2 'Cleaning dxup source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	cd "${srcdir}"/"${_winesrcdir}"

	msg2 'Cleaning wine source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	# holds extra arguments to staging's patcher script, if applicable
	local _staging_args=()

	if [ "$_use_staging" == "true" ] && [ "$_staging_upstreamignore" != "true" ]; then
	  # change back to the wine upstream commit that this version of wine-staging is based in
	  msg2 'Changing wine HEAD to the wine-staging base commit...'
	  git checkout "$(../"$_stgsrcdir"/patches/patchinstall.sh --upstream-commit)"
	fi

	# output config to logfile
	echo "# Last $pkgname configuration :" > "$_where"/last_build_config.log
	echo "" >> "$_where"/last_build_config.log

	_realwineversion=$(_describe_wine)
	echo "Wine (plain) version: $_realwineversion" >> "$_where"/last_build_config.log

	if [ "$_use_staging" == "true" ]; then
	  cd "${srcdir}"/"${_stgsrcdir}"
	  _realwineversion=$(_describe_wine)
	  echo "Using wine-staging patchset (version $_realwineversion)" >> "$_where"/last_build_config.log
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	if [ "$_use_esync" == "true" ]; then
	  if [ -z "$_esync_version" ]; then
	    if git merge-base --is-ancestor 2600ecd4edfdb71097105c74312f83845305a4f2 HEAD; then # 3.20+
	      _esync_version="ce79346"
	    elif git merge-base --is-ancestor aec7befb5115d866724149bbc5576c7259fef820 HEAD; then # 3.19-3.17
	      _esync_version="b4478b7"
	    else
	      _esync_version="5898a69" # 3.16 and lower
	    fi
	  fi
	  echo "Using esync patchset (version ${_esync_version})" >> "$_where"/last_build_config.log
	  wget -O "$_where"/esync${_esync_version}.tgz https://github.com/zfigura/wine/releases/download/esync${_esync_version}/esync.tgz && tar zxf "$_where"/esync${_esync_version}.tgz -C "${srcdir}"
	fi

	if [ "$_use_pba" == "true" ]; then
	  # If using a wine version that includes 944e92b, disable PBA
	  if git merge-base --is-ancestor 944e92ba06ecadeb933d95e30035323483dfe7c7 HEAD; then # wined3d: Pass the wined3d_buffer_desc structure directly to buffer_init()
	    _pba_version="none"
	  # If using a wine version that includes 580ea44, apply 3.17+ fixes
	  elif git merge-base --is-ancestor 580ea44bc65472c0304d74b7e873acfb7f680b85 HEAD; then # wined3d: Use query buffer objects for occlusion queries
	    _pba_version="317+"
	  # If using a wine version that includes cf9536b, apply 3.14+ fixes
	  elif git merge-base --is-ancestor cf9536b6bfbefbf5003c7633446a91f6e399c4de HEAD; then # wined3d: Move OpenGL initialisation code to adapter_gl.c
	    _pba_version="314+"
	  else
	    _pba_version="313-"
	  fi
	fi

	if [ "$_use_legacy_gallium_nine" == "true" ]; then
	  echo "Using gallium nine patchset (legacy)" >> "$_where"/last_build_config.log
	fi

	if [ "$_use_vkd3d" == "true" ]; then
	  if [ "$_use_dxvk" == "true" ] && [ "$_dxvk_dxgi" != "true" ] || [ "$_use_dxvk" != "true" ]; then
	    _configure_args+=(--with-vkd3d)
	    echo "Using VKD3D for d3d12 translation" >> "$_where"/last_build_config.log
	  else
	    echo "VKD3D force disabled as it requires wine's dxgi instead of DXVK's !" >> "$_where"/last_build_config.log
	  fi
	fi

	if [ "$_use_dxvk" == "true" ]; then
	  echo "Using DXVK winelib for d3d10 and d3d11 translation" >> "$_where"/last_build_config.log
	  if [ "$_dxvk_dxgi" == "true" ]; then
	    echo "Using DXVK's dxgi instead of wine's" >> "$_where"/last_build_config.log
	  fi
	  if [ "$_use_dxup" == "true" ]; then
	    echo "Using DXUP winelib for d3d9 translation" >> "$_where"/last_build_config.log
	  fi
	fi

	echo "" >> "$_where"/last_build_config.log

	# apply compiler choice and optimizations
	if [ -n "$_OPTIONAL_MARCHFLAG" ]; then
	  _OPTIONAL_MARCHFLAG=-march=$_OPTIONAL_MARCHFLAG && echo "Using $_OPTIONAL_MARCHFLAG" >> "$_where"/last_build_config.log
	fi

	if [ "$_NO_MSGS_FLAGS" == "true" ]; then
	  _GCC_FLAGS="$_GCC_FLAGS -DWINE_NO_TRACE_MSGS -DWINE_NO_DEBUG_MSGS" && echo "Disabled trace/debug messages" >> "$_where"/last_build_config.log
	fi

	if [ "$_COMPILEWITH" == "clang" ]; then
	  export CC="clang"
	  export CXX="clang++"
	  echo "Using clang compiler" >> "$_where"/last_build_config.log
	  if [ "$_LOCAL_OPTIMIZED" == "true" ]; then
	    export COMMON_FLAGS="-std=gnu89 -g $_CLANG_FLAGS $_OPTIONAL_MARCHFLAG"
	    export LDFLAGS="$_CLANG_FLAGS"
	  fi
	elif [ "$_COMPILEWITH" == "zapcc" ]; then
	  export CC="zapcc"
	  export CXX="zapcc++"
	  echo "Using zapcc compiler" >> "$_where"/last_build_config.log
	  if [ "$_LOCAL_OPTIMIZED" == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g $_CLANG_FLAGS $_OPTIONAL_MARCHFLAG"
	    export LDFLAGS="$_CLANG_FLAGS"
	  fi
	elif [ "$_COMPILEWITH" == "gcc7" ]; then
	  export CC="gcc-7"
	  export CXX="g++-7"
	  echo "Using gcc7 compiler" >> "$_where"/last_build_config.log
	  if [ "$_LOCAL_OPTIMIZED" == "true" ]; then
	    export COMMON_FLAGS="$_GCC_FLAGS $_OPTIONAL_MARCHFLAG"
	    export LDFLAGS="$_GCC_FLAGS"
	  fi
	else
	  echo "Using gcc compiler" >> "$_where"/last_build_config.log
	  if [ "$_LOCAL_OPTIMIZED" == "true" ]; then
	    export COMMON_FLAGS="$_GCC_FLAGS $_OPTIONAL_MARCHFLAG"
	    export LDFLAGS="$_GCC_FLAGS"
	  fi
	fi

	if [ "$_LOCAL_OPTIMIZED" == "true" ]; then
	  export CFLAGS="${COMMON_FLAGS}"
	  export CXXFLAGS="${COMMON_FLAGS}"
	  echo "With predefined optimizations" >> "$_where"/last_build_config.log
	else
	  echo "Using /etc/makepkg.conf settings for compiler optimization flags" >> "$_where"/last_build_config.log
	fi

	echo "" >> "$_where"/last_build_config.log

	# workaround for FS#55128
	# https://bugs.archlinux.org/task/55128
	# https://bugs.winehq.org/show_bug.cgi?id=43530
	export CFLAGS="${CFLAGS/-fno-plt/}"
	export LDFLAGS="${LDFLAGS/,-z,now/}"

	# Update winevulkan
	if [ "$_update_winevulkan" == "true" ] && ! git merge-base --is-ancestor 3e4189e3ada939ff3873c6d76b17fb4b858330a8 HEAD && git merge-base --is-ancestor eb39d3dbcac7a8d9c17211ab358cda4b7e07708a HEAD; then
	  _patchname='winevulkan-1.1.103.patch' && _patchmsg="Applied winevulkan 1.1.103 patch" && nonuser_patcher
	fi

	# use CLOCK_MONOTONIC instead of CLOCK_MONOTONIC_RAW in ntdll/server - lowers overhead
	if [ "$_clock_monotonic" == "true" ]; then
	  _patchname='use_clock_monotonic.patch' && _patchmsg="Applied clock_monotonic patch" && nonuser_patcher
	fi

	# Fixes (partially) systray on plasma 5 - https://bugs.winehq.org/show_bug.cgi?id=38409
	if [ "$_plasma_systray_fix" == "true" ]; then
	  _patchname='plasma_systray_fix.patch' && _patchmsg="Applied plasma 5 systray fix" && nonuser_patcher
	fi

	# Bypass compositor in fullscreen mode - Reduces stuttering and improves performance
	if [ "$_FS_bypass_compositor" == "true" ]; then
	  _patchname='FS_bypass_compositor.patch' && _patchmsg="Applied Fullscreen compositor bypass patch" && nonuser_patcher
	fi

	# Use faudio for xaudio2 - https://github.com/aeikum/wine/commits/faudio-fixups
	if [ "$_use_faudio" == "true" ] && [ "$_use_staging" == "true" ]; then
	  if git merge-base --is-ancestor 9422b844b59282db04af533451f50661de56b9ca HEAD; then
	    _staging_args+=(-W xaudio2-revert -W xaudio2_7-CreateFX-FXEcho -W xaudio2_7-WMA_support -W xaudio2_CommitChanges) # Disable xaudio2 staging patchsets for faudio
	    if [ "$_faudio_ignorecheck" != "true" ]; then
	      _configure_args+=(--with-faudio)
	    fi
	  elif git merge-base --is-ancestor 47fbcece36cad190c4d18f7636df67d1382b7545 HEAD && ! git merge-base --is-ancestor 3e390b1aafff47df63376a8ca4293c515d74f4ba HEAD; then
	    _patchname='faudio-exp.patch' && _patchmsg="Applied faudio for xaudio2 patch" && nonuser_patcher
	    _staging_args+=(-W xaudio2_7-CreateFX-FXEcho -W xaudio2_7-WMA_support -W xaudio2_CommitChanges) # Disable xaudio2 staging patchsets for faudio
	    if [ "$_faudio_ignorecheck" != "true" ]; then
	      _configure_args+=(--with-faudio)
	    fi
	  fi
	fi

	# Patch to allow Path of Exile to run with DirectX11
	# https://bugs.winehq.org/show_bug.cgi?id=42695
	if [ "$_poe_fix" == "true" ]; then
	  _patchname='poe-fix.patch' && _patchmsg="Applied Path of Exile DX11 fix" && nonuser_patcher
	fi

	# Workaround for F4SE/SkyrimSE Script Extender
	# https://github.com/hdmap/wine-hackery/tree/master/f4se
	if [ "$_f4skyrimse_fix" == "true" ]; then
	  _patchname='f4skyrimse-fix.patch' && _patchmsg="Applied F4/SkyrimSE Script Extender fix" && nonuser_patcher
	fi

	# Magic The Gathering: Arena crash fix
	if [ "$_mtga_fix" == "true" ]; then
	  _patchname='mtga.patch' && _patchmsg="Applied MTGA crashfix" && nonuser_patcher
	fi

	# The Sims 2 fix - disable wined3d-WINED3D_RS_COLORWRITEENABLE and wined3d-Indexed_Vertex_Blending staging patchsets for 4.2+devel and lower - The actual patch is applied after staging
	if [ "$_sims2_fix" == "true" ] && ! git merge-base --is-ancestor d88f12950761e9ff8d125a579de6e743979f4945 HEAD; then
	  _staging_args+=(-W wined3d-WINED3D_RS_COLORWRITEENABLE -W wined3d-Indexed_Vertex_Blending)
	fi

	# The Sims 3 fix - reverts 6823abd521c0c12d20d9171fb5ae8b300009d082 to fix Sims 3 on older than 415.xx nvidia drivers - https://bugs.winehq.org/show_bug.cgi?id=45361
	if [ "$_sims3_fix" == "true" ] && git merge-base --is-ancestor 6823abd521c0c12d20d9171fb5ae8b300009d082 HEAD; then
	  _patchname='sims_3-oldnvidia.patch' && _patchmsg="Applied The Sims 3 Debian&co nvidia fix" && nonuser_patcher
	fi

	# Python fix for <=3.18 (backported from zzhiyi's patches) - fix for python and needed for "The Sims 4" to work - replaces staging partial implementation - https://bugs.winehq.org/show_bug.cgi?id=44999 - The actual patch is applied after staging
	if [ "$_318python_fix" == "true" ] && ! git merge-base --is-ancestor 3ebd2f0be30611e6cf00468c2980c5092f91b5b5 HEAD; then
	  _staging_args+=(-W kernelbase-PathCchCombineEx)
	fi

	# Mechwarrior Online fix - https://mwomercs.com/forums/topic/268847-running-the-game-on-ubuntu-steam-play/page__st__20__p__6195387#entry6195387
	if [ "$_mwo_fix" == "true" ]; then
	  _patchname='mwo.patch' && _patchmsg="Applied Mechwarrior Online fix" && nonuser_patcher
	fi

	# Resident Evil 4 hack - https://bugs.winehq.org/show_bug.cgi?id=46336
	if [ "$_re4_fix" == "true" ]; then
	  _patchname='resident_evil_4_hack.patch' && _patchmsg="Applied Resident Evil 4 hack" && nonuser_patcher
	fi

	# World of Final Fantasy hack - https://bugs.winehq.org/show_bug.cgi?id=45277
	if [ "$_woff_fix" == "true" ]; then
	  _patchname='woff-hack.patch' && _patchmsg="Applied World of Final Fantasy hack" && nonuser_patcher
	fi

	# steam crossover hack for store/web functionality
	# https://bugs.winehq.org/show_bug.cgi?id=39403
	if [ "$_steam_fix" == "true" ]; then
	  _patchname='steam.patch' && _patchmsg="Applied steam crossover hack" && nonuser_patcher
	fi

	# Disable server-send_hardware_message staging patchset if found - Fixes FFXIV/Warframe/Crysis 3 (...) mouse jittering issues on 3.19 staging and lower.
	if [ "$_server_send_hwmsg_disable" == "true" ] && [ "$_use_staging" == "true" ]; then
	  if [ -d "${srcdir}"/"${_stgsrcdir}"/patches/server-send_hardware_message ]; then # ghetto check for server-send_hardware_message staging patchset presence
	    _staging_args+=(-W server-send_hardware_message)
	    echo "server-send_hardware_message staging patchset disabled (mouse jittering fix)" >> "$_where"/last_build_config.log
	  else
	    echo "server-send_hardware_message staging patchset wasn't found, so _server_send_hwmsg_disable setting was ignored" >> "$_where"/last_build_config.log
	  fi
	fi

	# Disable winepulse pulseaudio patchset
	if [ "$_staging_pulse_disable" == "true" ] && [ "$_use_staging" == "true" ]; then
	  _staging_args+=(-W winepulse-PulseAudio_Support)
	  echo "Disabled the staging winepulse patchset" >> "$_where"/last_build_config.log
	fi

	# CSMT toggle patch - Corrects the CSMT toggle to be more logical
	if [ "$_CSMT_toggle" == "true" ] && [ "$_use_staging" == "true" ]; then
	  cd "${srcdir}"/"${_stgsrcdir}"
	  _patchname='CSMT-toggle.patch' && _patchmsg="Applied CSMT toggle logic patch" && nonuser_patcher
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	# wine-staging user patches
	if [ "$_user_patches" == "true" ] && [ "$_use_staging" == "true" ]; then
	  _userpatch_target="wine-staging"
	  _userpatch_ext="mystaging"
	  cd "${srcdir}"/"${_stgsrcdir}"
	  user_patcher
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	if [ "$_use_staging" == "true" ]; then
	  msg2 "Applying wine-staging patches..." && echo "Staging overrides, if any: ${_staging_args[@]}" >> "$_where"/last_build_config.log
	  "${srcdir}"/"${_stgsrcdir}"/patches/patchinstall.sh DESTDIR="${srcdir}/${_winesrcdir}" --all "${_staging_args[@]}"

	  # Remove staging version tag
	  sed -i "s/  (Staging)//g" "${srcdir}"/"${_winesrcdir}"/libs/wine/Makefile.in
	fi

	# esync
	if [ "$_use_esync" == "true" ]; then
	  if git merge-base --is-ancestor 2600ecd4edfdb71097105c74312f83845305a4f2 HEAD; then # Esync ce79346
	    if [ "$_use_staging" == "true" ]; then
	      # fixes for esync patches to apply to staging
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      _patchname='esync-staging-fixes-r3.patch' && _patchmsg="Using esync staging 3.20+ compat fixes" && nonuser_patcher
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi

	    cd "${srcdir}"/"${_esyncsrcdir}"
	    _patchname='esync-compat-fixes-r3.patch' && _patchmsg="Using esync 3.20+ compat fixes" && nonuser_patcher
	    cd "${srcdir}"/"${_winesrcdir}"

	    # if using a wine version that includes 7ba361b, apply 4.4+ additional fixes
	    if git merge-base --is-ancestor 7ba361b47bc95df624eac83c170d6c1a4041d8f8 HEAD; then # ntdll: Add support for returning previous state argument in event functions
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      _patchname='esync-compat-fixes-r3.1.patch' && _patchmsg="Using esync 4.4+ additional compat fixes" && nonuser_patcher
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi
	  # if using a wine version that includes aec7bef, use 3.17+ fixes
	  elif git merge-base --is-ancestor aec7befb5115d866724149bbc5576c7259fef820 HEAD; then # server: Avoid potential size overflow for empty object attributes
	    if [ "$_use_staging" == "true" ]; then
	      # fixes for esync patches to apply to staging
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      _patchname='esync-staging-fixes-r2.patch' && _patchmsg="Using esync staging 3.17+ compat fixes" && nonuser_patcher
	      cd "${srcdir}"/"${_winesrcdir}"
	    # if using a wine version that includes c099655, use 3.19+ addon fixes
	    elif git merge-base --is-ancestor c0996553a1d9056e1b89871fc8c3fb0bfb5a4f0c HEAD; then #  server: Support FILE_SKIP_COMPLETION_PORT_ON_SUCCESS on server-side asyncs
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      _patchname='esync-compat-fixes-r2.1.patch' && _patchmsg="Using esync 3.19+ compat addon fixes" && nonuser_patcher
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi

	    cd "${srcdir}"/"${_esyncsrcdir}"
	    _patchname='esync-compat-fixes-r2.patch' && _patchmsg="Using esync 3.17+ compat fixes" && nonuser_patcher
	    cd "${srcdir}"/"${_winesrcdir}"
	  else
	    # 3.10 - 3.16
	    if [ "$_use_staging" == "true" ]; then
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      _patchname='esync-staging-fixes-r1.patch' && _patchmsg="Using esync staging 3.16- compat fixes" && nonuser_patcher
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi

	    cd "${srcdir}"/"${_esyncsrcdir}"
	    _patchname='esync-compat-fixes-r1.patch' && _patchmsg="Using esync 3.16- compat fixes" && nonuser_patcher
	    cd "${srcdir}"/"${_winesrcdir}"

	    # if using a wine version that includes 57212f6, apply 3.14+ additional fixes
	    if git merge-base --is-ancestor 57212f64f8e4fef0c63c633940e13d407c0f2069 HEAD; then # kernel32: Add AttachConsole implementation
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      _patchname='esync-compat-fixes-r1.1.patch' && _patchmsg="Using esync 3.14+ additional compat fixes" && nonuser_patcher
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi
	  fi

	  # apply esync patches
	  for _f in "${srcdir}"/"${_esyncsrcdir}"/*.patch; do
	    msg2 "Applying ${_f}"
	    git apply -C1 --verbose < "${_f}"
	  done

	  # Fix for server-Desktop_Refcount and patchsets depending on it (ws2_32-WSACleanup, ws2_32-TransmitFile, server-Pipe_ObjectName)
	  if [ "$_use_staging" == "true" ]; then
	    _patchname='esync-no_alloc_handle.patch' && _patchmsg="Using esync-no_alloc_handle patch to fix server-Desktop_Refcount ws2_32-WSACleanup ws2_32-TransmitFile server-Pipe_ObjectName with Esync enabled" && nonuser_patcher
	  fi
	fi
	# /esync

	# Launch with dedicated gpu desktop entry patch
	if [ "$_launch_with_dedicated_gpu" == "true" ]; then
	  _patchname='launch-with-dedicated-gpu-desktop-entry.patch' && _patchmsg="Applied launch with dedicated gpu desktop entry patch" && nonuser_patcher
	fi

	# Low latency alsa audio - https://blog.thepoon.fr/osuLinuxAudioLatency/
	if [ "$_lowlatency_audio" == "true" ] && [ "$_use_staging" == "true" ]; then
	  _patchname='lowlatency_audio.patch' && _patchmsg="Applied low latency alsa audio patch" && nonuser_patcher
	fi

	# Fortnite Fix - Currently not working anymore
	if [ "$_fortnite_fix" == "true" ]; then
	  _patchname='fortnite.patch' && _patchmsg="Applied Fortnite crashfix" && nonuser_patcher
	fi

	# The Sims 2 fix - https://bugs.winehq.org/show_bug.cgi?id=8051
	if [ "$_sims2_fix" == "true" ]; then
	  if git merge-base --is-ancestor d88f12950761e9ff8d125a579de6e743979f4945 HEAD; then
	    _patchname='sims_2-fix.patch' && _patchmsg="Applied The Sims 2 fix" && nonuser_patcher
	  elif git merge-base --is-ancestor 4de2da1d146248ed872ae45c30b8d485832f4ac8 HEAD; then
	    _patchname='sims_2-fix-4.2-.patch' && _patchmsg="Applied The Sims 2 fix (4.2 and lower)" && nonuser_patcher
	  else
	    _patchname='sims_2-fix-legacy.patch' && _patchmsg="Applied The Sims 2 fix (legacy)" && nonuser_patcher
	  fi
	fi

	# Python fix for <=3.18 (backported from zzhiyi's patches) - fix for python and needed for "The Sims 4" to work - replaces staging partial implementation - https://bugs.winehq.org/show_bug.cgi?id=44999
	if [ "$_318python_fix" == "true" ] && ! git merge-base --is-ancestor 3ebd2f0be30611e6cf00468c2980c5092f91b5b5 HEAD; then
	  _patchname='pythonfix.patch' && _patchmsg="Applied Python/The Sims 4 fix" && nonuser_patcher
	fi

	# apply wine-pba patchset
	if [ "$_use_pba" == "true" ]; then
	  if [ "$_pba_version" == "none" ]; then
	    echo "PBA disabled due to known issues with selected Wine version" >> "$_where"/last_build_config.log
	  else
	    _patchname="PBA${_pba_version}.patch" && _patchmsg="Using pba (${_pba_version}) patchset" && nonuser_patcher
	  fi
	fi

	# d3d9 patches
	if [ "$_use_legacy_gallium_nine" == "true" ] && [ "$_use_staging" == "true" ] && ! git merge-base --is-ancestor e24b16247d156542b209ae1d08e2c366eee3071a HEAD; then
	  wget -O "$_where"/wine-d3d9.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/wine-d3d9.patch
	  wget -O "$_where"/staging-helper.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/staging-helper.patch
	  patch -Np1 < "$_where"/staging-helper.patch
	  patch -Np1 < "$_where"/wine-d3d9.patch
	  autoreconf -f
	  _configure_args+=(--with-d3d9-nine)
	elif [ "$_use_legacy_gallium_nine" == "true" ] && [ "$_use_staging" != "true" ] && ! git merge-base --is-ancestor e24b16247d156542b209ae1d08e2c366eee3071a HEAD; then
	  wget -O "$_where"/wine-d3d9.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/wine-d3d9.patch
	  wget -O "$_where"/d3d9-helper.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/d3d9-helper.patch
	  patch -Np1 < "$_where"/d3d9-helper.patch
	  patch -Np1 < "$_where"/wine-d3d9.patch
	  autoreconf -f
	  _configure_args+=(--with-d3d9-nine)
	elif [ "$_use_legacy_gallium_nine" == "true" ] && git merge-base --is-ancestor e24b16247d156542b209ae1d08e2c366eee3071a HEAD; then
	  echo "Legacy Gallium Nine disabled due to known issues with selected Wine version" >> "$_where"/last_build_config.log
	fi

	# GLSL toggle patch - Allows for use of ARB instead of GLSL
	if [ "$_GLSL_toggle" == "true" ] && [ "$_use_staging" == "true" ] && [ "$_use_legacy_gallium_nine" != "true" ]; then
	  _patchname='GLSL-toggle.patch' && _patchmsg="Applied GLSL toggle patch" && nonuser_patcher
	fi

	# Proton Fullscreen patch - Allows resolution changes for fullscreen games without changing desktop resolution
	if [ "$_proton_fs_hack" == "true" ] && [ "$_use_staging" == "true" ]; then
	  if [ "$_FS_bypass_compositor" == "true" ]; then
	    if git merge-base --is-ancestor 57bb5cce75aed1cb06172cc0b6b696dfb008e7c1 HEAD; then
	      _patchname='valve_proton_fullscreen_hack-staging.patch' && _patchmsg="Applied Proton fullscreen hack patch" && nonuser_patcher
	    elif git merge-base --is-ancestor 6e87235523f48d523285409dcbbd7885df9948d0 HEAD; then
	      _patchname='valve_proton_fullscreen_hack-staging-4.4.patch' && _patchmsg="Applied Proton fullscreen hack patch (for <=4.4)" && nonuser_patcher
	    else
	      _patchname='valve_proton_fullscreen_hack-staging-legacy.patch' && _patchmsg="Applied Proton fullscreen hack patch (legacy)" && nonuser_patcher
	    fi
	  elif [ "$_FS_bypass_compositor" == "false" ]; then # Force-enable FS_bypass_compositor patch if disabled as it's a dependency Proton Fullscreen patch
	    _patchname='FS_bypass_compositor.patch' && _patchmsg="Applied Fullscreen compositor bypass patch (force enabled because Proton fullscreen hack is enabled and needs it)" && nonuser_patcher
	    if git merge-base --is-ancestor 57bb5cce75aed1cb06172cc0b6b696dfb008e7c1 HEAD; then
	      _patchname='valve_proton_fullscreen_hack-staging.patch' && _patchmsg="Applied Proton fullscreen hack patch" && nonuser_patcher
	    elif git merge-base --is-ancestor 6e87235523f48d523285409dcbbd7885df9948d0 HEAD; then
	      _patchname='valve_proton_fullscreen_hack-staging-4.4.patch' && _patchmsg="Applied Proton fullscreen hack patch (for <=4.4)" && nonuser_patcher
	    else
	      _patchname='valve_proton_fullscreen_hack-staging-legacy.patch' && _patchmsg="Applied Proton fullscreen hack patch (legacy)" && nonuser_patcher
	    fi
	  fi
	fi

	# IMAGE_FILE_LARGE_ADDRESS_AWARE override - Enable with WINE_LARGE_ADDRESS_AWARE=1
	if [ "$_large_address_aware" == "true" ] && git merge-base --is-ancestor c998667bf0983ef99cc48847d3d6fc6ca6ff4a2d HEAD && ! git merge-base --is-ancestor 9f0d66923933d82ae0b09fe5d84f977c1a657cc1 HEAD; then
	  if [ "$_use_staging" == "true" ]; then
	    _patchname='LAA-staging-legacy.patch' && _patchmsg="Applied large address aware override support (legacy)" && nonuser_patcher
	  else
	    _patchname='LAA-legacy.patch' && _patchmsg="Applied large address aware override support (legacy)" && nonuser_patcher
	  fi
	elif [ "$_large_address_aware" == "true" ] && git merge-base --is-ancestor 9f0d66923933d82ae0b09fe5d84f977c1a657cc1 HEAD; then
	  if [ "$_use_staging" == "true" ]; then
	    _patchname='LAA-staging.patch' && _patchmsg="Applied large address aware override support" && nonuser_patcher
	  else
	    _patchname='LAA.patch' && _patchmsg="Applied large address aware override support" && nonuser_patcher
	  fi
	fi

	# Enable STAGING_SHARED_MEMORY by default - https://wiki.winehq.org/Wine-Staging_Environment_Variables#Shared_Memory
	if [ "$_stg_shared_mem_default" == "true" ] && [ "$_use_staging" == "true" ]; then
	  _patchname='enable_stg_shared_mem_def.patch' && _patchmsg="Enable STAGING_SHARED_MEMORY by default" && nonuser_patcher
	fi

	if [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" == "proton" ]; then
	  _patchname='proton-tkg.patch' && _patchmsg="Using Steam-specific Proton-tkg patches" && nonuser_patcher
	fi

	# wine user patches
	if [ "$_user_patches" == "true" ]; then
	  _userpatch_target="plain-wine"
	  _userpatch_ext="my"
	  user_patcher
	fi

	# Set custom version so that it reports the same as pkgver
	sed -i "s/GIT_DIR=\$(top_srcdir)\\/.git git describe HEAD 2>\\/dev\\/null || echo \"wine-\$(PACKAGE_VERSION)\"/echo \"wine-$_realwineversion\"/g" "${srcdir}"/"${_winesrcdir}"/libs/wine/Makefile.in

	# Set custom version tags
	local _version_tags=()
	_version_tags+=(TkG) # watermark to keep track of TkG builds independently of the settings
	if [ "$_use_staging" == "true" ]; then
	  _version_tags+=(Staging)
	else
	  _version_tags+=(Plain)
	fi
	if [ "$_use_esync" == "true" ]; then
	  _version_tags+=(Esync)
	fi
	if [ "$_use_pba" == "true" ] && [ "$_pba_version" != "none" ]; then
	  _version_tags+=(PBA)
	fi
	if [ "$_use_legacy_gallium_nine" == "true" ]; then
	  _version_tags+=(Nine)
	fi
	if [ "$_use_vkd3d" == "true" ]; then
	  if [ "$_use_dxvk" == "true" ] && [ "$_dxvk_dxgi" != "true" ] || [ "$_use_dxvk" != "true" ]; then
	    _version_tags+=(Vkd3d)
	  fi
	fi
	if [ "$_use_dxvk" == "true" ]; then
	  _version_tags+=(Dxvk)
	  if [ "$_use_dxup" == "true" ]; then
	    _version_tags+=(Dxup)
	  fi
	  if [ "$_dxvk_async" == "true" ]; then
	    _version_tags+=(Async)
	  fi
	fi
	if [ -n "$_OPTIONAL_MARCHFLAG" ]; then
	  _version_tags+=("$_OPTIONAL_MARCHFLAG")
	fi
	sed -i "s/\\\1/\\\1  ( ${_version_tags[*]} )/g" "${srcdir}"/"${_winesrcdir}"/libs/wine/Makefile.in

	# dxvk user patches
	if [ "$_user_patches" == "true" ] && [ "$_use_dxvk" == "true" ]; then
	  _userpatch_target="dxvk"
	  _userpatch_ext="mydxvk"
	  cd "${srcdir}"/"${_dxvksrcdir}"
	  user_patcher
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	# dxup user patches
	if [ "$_user_patches" == "true" ] && [ "$_use_dxup" == "true" ]; then
	  _userpatch_target="dxup"
	  _userpatch_ext="mydxup"
	  cd "${srcdir}"/"${_dxupsrcdir}"
	  user_patcher
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	# fix path of opencl headers
	sed 's|OpenCL/opencl.h|CL/opencl.h|g' -i configure*

	# delete old build dirs (from previous builds)
	rm	-rf "${srcdir}"/wine-tkg-*-{32,64}-build

	# no compilation
	if [ "$_NOCOMPILE" == "true" ]; then
	  msg2 'make prepare function fail by using Gandalf'
	  YOU_SHALL_NOT_PASS
	fi

	# create new build dirs
	mkdir -p "${srcdir}"/"${pkgname}"-64-build
	mkdir -p "${srcdir}"/"${pkgname}"-32-build

	cd "$_where" # this is needed on version update not to get lost in srcdir
}

build() {

	cd "${srcdir}"

	local _prefix=/usr
	local _lib32name="lib32"
	local _lib64name="lib"

	# External install
	if [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" != "proton" ]; then
	  if [ "$_EXTERNAL_INSTALL_TYPE" == "lutris" ]; then
	    _DEFAULT_EXTERNAL_PATH=$_LUTRIS_RUNNERS_PATH
	  fi
	  _prefix="$_DEFAULT_EXTERNAL_PATH/$pkgname-$_realwineversion"
	elif [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" == "proton" ]; then
	  _prefix="" && _lib32name="lib" && _lib64name="lib64" && _configure_args+=(--disable-tests)
	fi

	# build wine 64-bit
	# (according to the wine wiki, this 64-bit/32-bit building order is mandatory)
	msg2 'Building Wine-64...'
	cd  "${srcdir}"/"${pkgname}"-64-build
	../${_winesrcdir}/configure \
		--prefix="$_prefix" \
		--libdir="$_prefix/$_lib64name" \
		--with-x \
		--with-gstreamer \
		--enable-win64 \
		--with-xattr \
		"${_configure_args[@]}"

	if [ "$_LOCAL_OPTIMIZED" == 'true' ]; then
	  # make using all available threads
	  schedtool -B -n 1 -e ionice -n 1 make -j$(nproc)
	else
	  # make using makepkg settings
	  schedtool -B -n 1 -e ionice -n 1 make
	fi

	if [ "$_NOLIB32" != "true" ]; then
	  # build wine 32-bit
	  export PKG_CONFIG_PATH='/usr/lib32/pkgconfig'
	  msg2 'Building Wine-32...'
	  cd "${srcdir}/${pkgname}"-32-build
	  ../${_winesrcdir}/configure \
		  --prefix="$_prefix" \
		  --libdir="$_prefix/$_lib32name" \
		  --with-x \
		  --with-gstreamer \
		  --with-xattr \
		  "${_configure_args[@]}" \
		  --with-wine64="${srcdir}/${pkgname}"-64-build
	fi

	if [ "$_LOCAL_OPTIMIZED" == 'true' ]; then
	  # make using all available threads
	  schedtool -B -n 1 -e ionice -n 1 make -j$(nproc)
	else
	  # make using makepkg settings
	  schedtool -B -n 1 -e ionice -n 1 make
	fi

	# Build DXVK winelib
	if [ "$_use_dxvk" == "true" ]; then
	  cd "${srcdir}"/"${_dxvksrcdir}"
	  if [ "$_dxvk_dxgi" == "true" ]; then
	    touch plzdxgi
	  fi
	  mkdir build
	  _patchname='dxvk-winelib.patch' && _patchmsg="Using dxvk-winelib patch" && nonuser_patcher
		if [ "$_dxvk_async" == "true" ]; then
			_patchname='dxvk-async.patch' && _patchmsg="Using dxvk-async patch" && nonuser_patcher
		fi
	  if [ "$_NOLIB32" == "true" ]; then
	    sed -i "/build_arch 32/d" package-release-wine.sh
	  fi
	  ./package-release-wine.sh master build --no-package
	  # Build DXUP winelib
	  if [ "$_use_dxup" == "true" ]; then
	    cd "${srcdir}"/"${_dxupsrcdir}"
	    mkdir build
	    _patchname='dxup-winelib.patch' && _patchmsg="Using dxup-winelib patch" && nonuser_patcher
	    if [ "$_NOLIB32" == "true" ]; then
	      sed -i "/build_arch 32/d" package-release-wine.sh
	    fi
	    ./package-release-wine.sh master build --no-package
	  fi
	fi
}

package() {

	local _prefix=/usr
	local _lib32name="lib32"
	local _lib64name="lib"

	# External install
	if [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" != "proton" ]; then
	  if [ "$_EXTERNAL_INSTALL_TYPE" == "lutris" ]; then
	    _DEFAULT_EXTERNAL_PATH=$_LUTRIS_RUNNERS_PATH
	  fi
	  if [ "$_EXTERNAL_NOVER" == "true" ]; then
	    _prefix="$_DEFAULT_EXTERNAL_PATH/$pkgname"
	  else
	    # $_realwineversion doesn't carry over into the fakeroot environment
	    if [ "$_use_staging" == "true" ]; then
	      cd "$srcdir/$_stgsrcdir"
	    else
	      cd "$srcdir/$_winesrcdir"
	    fi
	    _realwineversion=$(_describe_wine)
	    _prefix="$_DEFAULT_EXTERNAL_PATH/$pkgname-$_realwineversion"
	  fi
	elif [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" == "proton" ]; then
	  _prefix="" && _lib32name="lib" && _lib64name="lib64"
	fi

	if [ "$_NOLIB32" != "true" ]; then
	  # package wine 32-bit
	  # (according to the wine wiki, this reverse 32-bit/64-bit packaging order is important)
	  msg2 'Packaging Wine-32...'
	  cd "${srcdir}/${pkgname}"-32-build
	  make 	  prefix="${pkgdir}$_prefix" \
			  libdir="${pkgdir}$_prefix/$_lib32name" \
			  dlldir="${pkgdir}$_prefix/$_lib32name/wine" install
	fi

	# package wine 64-bit
	msg2 'Packaging Wine-64...'
	cd "${srcdir}/${pkgname}"-64-build
	make 	prefix="${pkgdir}$_prefix" \
			libdir="${pkgdir}$_prefix/$_lib64name" \
			dlldir="${pkgdir}$_prefix/$_lib64name/wine" install

	if [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" != "proton" ] || [ "$_EXTERNAL_INSTALL" != "true" ]; then
	  # freetype font smoothing for win32 applications
	  install -d "$pkgdir"/etc/fonts/conf.{avail,d}
	  install -m644 "${srcdir}/30-win32-aliases.conf" "${pkgdir}/etc/fonts/conf.avail/30-$pkgname-win32-aliases.conf"
	  ln -s "../conf.avail/30-$pkgname-win32-aliases.conf" "${pkgdir}/etc/fonts/conf.d/30-$pkgname-win32-aliases.conf"
	fi

	# wine binfmt
	if [ "$_EXTERNAL_INSTALL" == "true" ]; then
	  if [ "$_EXTERNAL_INSTALL_TYPE" == "proton" ]; then
	    sed 's/winemenubuilder.exe -a -r/winemenubuilder.exe -r/g' "${pkgdir}"/share/wine/wine.inf -i
	  else
	    mkdir -p "${pkgdir}/usr/lib/binfmt.d"
	    # change binfmt.conf to actual installed path
	    sed -e "s|/usr/bin/wine|$_prefix/bin/wine|g" < "${srcdir}/wine-binfmt.conf" > "${pkgdir}/usr/lib/binfmt.d/$pkgname.conf"
	  fi
	else
	  install -Dm 644 "${srcdir}/wine-binfmt.conf" "${pkgdir}/usr/lib/binfmt.d/wine.conf"
	  # disable mime-types registering
	  if [ "$_MIME_NOPE" == "true" ]; then
	    sed 's/winemenubuilder.exe -a -r/winemenubuilder.exe -r/g' "${pkgdir}"/usr/share/wine/wine.inf -i
	  fi
	fi

	# dxvk
	if [ "$_use_dxvk" == "true" ]; then
	  if [ "$_NOLIB32" != "true" ]; then
	    cp -rv "${srcdir}"/"${_dxvksrcdir}"/build/dxvk-master/x32/* "${pkgdir}$_prefix"/"$_lib32name"/wine
	  fi
	  cp -rv "${srcdir}"/"${_dxvksrcdir}"/build/dxvk-master/x64/* "${pkgdir}$_prefix"/"$_lib64name"/wine
	  # dxup
	  if [ "$_use_dxup" == "true" ]; then
	    if [ "$_NOLIB32" != "true" ]; then
	      cp -rv "${srcdir}"/"${_dxupsrcdir}"/build/dxup-master/x32/* "${pkgdir}$_prefix"/"$_lib32name"/wine
	    fi
	    cp -rv "${srcdir}"/"${_dxupsrcdir}"/build/dxup-master/x64/* "${pkgdir}$_prefix"/"$_lib64name"/wine
	  fi
	fi

	cp "$_where"/last_build_config.log "${pkgdir}$_prefix"/share/wine/wine-tkg-config.txt

	if [ "$_use_esync" == "true" ]; then
	  msg2 '##########################################################################################################################'
	  msg2 ''
	  msg2 'Remember to export WINEESYNC=1 and increase file descriptors limits in /etc/security/limits.conf to use ESYNC goodness ;)'
	  msg2 ''
	  msg2 'https://raw.githubusercontent.com/zfigura/wine/esync/README.esync'
	  msg2 ''
	  msg2 '##########################################################################################################################'
	fi

	if [ "$_use_dxvk" == "true" ] && [ "$_dxvk_async" == "true" ]; then
	  msg2 '################################################'
	  msg2 ''
	  msg2 'Remember to export DXVK_ASYNC=1 to use ASYNC'
	  msg2 ''
	  msg2 'https://github.com/jomihaka/dxvk-poe-hack'
	  msg2 ''
	  msg2 '################################################'
	fi

	# External install
	if [ "$_EXTERNAL_INSTALL" == "true" ] && [ "$_EXTERNAL_INSTALL_TYPE" != "proton" ]; then
	  msg2 "### This wine will be installed to: $_prefix"
	  if [ "$_EXTERNAL_INSTALL_TYPE" == "opt" ]; then
	    msg2 "### Remember to use $_prefix/bin/wine instead of just wine (same for winecfg etc.)"
	  fi
	fi
}

md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'a49bc2bb374d5ea5045ada5401cd91a3'
         'ecada2fc8abda49c6bb788c25f05a822'
         'f50501943759c8731d40eb521e36e6da'
         'af6b455bdace212157b9a6652ee88d41'
         '6e301f262f004b930ffc3000839d837b'
         'cd52a9b26c15fd210cd5ed1da178dcb1'
         '65906da954430bde504dd47a69f23f6f'
         '342a6e02f73c06120ce01cc887489d9c'
         'd34ec9e86cbbf48b485a8c6f99d24921'
         'a527081e5f6eca3aec0b390d96d8587b'
         'f063189ec090d9071397d455d271199d'
         '6766554ceda75c32b79e0d33c216396f'
         'dd993e03188c86631e6c2cbdf14113aa'
         'b997bf4bae2d08f7e84870c8c91fb08b'
         '374ffc1d29488dd3fdac7d01f55964d4'
         '3a263a0f6211287af53ea7db79b1f34f'
         '4e1b9cc09a01749c07230c7241526371'
         'c4b104892b0501781789aadc5a95b261'
         'e32c770f6aa964e6093fe734c7dd6c0a'
         'd86e0feaeb690efe521ac3cc852fac12'
         'f3c95dcaeab28d8b97e80a5e9d9a1c01'
         '46f612602ee7698b840a4e757194cfa7'
         '0a8e5406472ae39c0687bc017edfb352'
         'c77e94d56f57d27dd26e9f99cbcd5bc3'
         'd27ec22ee6815a97b4d28ccdfc0420fe'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '1ff4e467f59409272088d92173a0f801'
         '517a67b31d26990e6704074ccb630f80'
         'ed6060dc030ebd5865f1fcc40d8863be'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         '65d47ea14d7c666d6308fc65a5ccd729'
         '3aafb27f35d4817942085d87904dcfc8'
         '927f39348cd29ce9876871e4edb15a09'
         'b2638b27a99b9f3a2f270a85a422d430'
         'c83562eee89d7984534029199e23bc5d'
         '5ca4ee142eafe2c8873d59b2feb51a7d'
         '6262b0ff26fd1e00eb6123db5e0a4160'
         '6458f4640d2b2da1123c7a312604508d'
         '345512bf5081097048a14ad6022f93ca'
         'c1bc0ab0ca1d531deaf32d0a58e5fbed'
         '07b48859d0b274c9b35be4de3016ae27'
         '3cb83a83c7ed9335eddbef665f4d89f9'
         '25e20e66ee3b2896f2979ba4e16ff767'
         'afd2e119b0d5aac290a0b89324624fb4'
         '3d52653b8f98cf5e0d7305fdbd5cb2c2'
         '1c4738e438debf72266b96d09f465b25'
         '96c13b5fc90f27939fb1ba25b8d4ad18'
         'cc0af6b6b3d2a8dac13c825231ff87fa')

trap exit_cleanup EXIT
