# Created by: Tk-Glitch <ti3nou at gmail dot com>

pkgname=wine-tkg-git
pkgver=4.17.r14.gb95882c0

# workaround for pkgrel overwritten on regen
pkgrel=1
eval pkgrel=211

_stgsrcdir='wine-staging-git'
_esyncsrcdir='esync'
_where=$PWD # track basedir as different Arch based distros are moving srcdir around
_configure_args=() # additional args to ./configure will be added during prepare()
_makepkg_options=()

# load functions
source "$_where"/wine-tkg-scripts/prepare.sh
source "$_where"/wine-tkg-scripts/build.sh

exit_cleanup() {
  _exit_cleanup
  remove_deps
}

# init steps
_init
_pkgnaming

# custom plain wine commit to pass to git
if [ "$_use_staging" == "false" ] && [ -n "$_plain_version" ]; then
  _plain_commit="#commit=$_plain_version"
fi

# custom staging commit to pass to git
if [ "$_use_staging" == "true" ] && [ -n "$_staging_version" ]; then
  _staging_commit="#commit=$_staging_version"
fi

pkgdesc='This "Wine to rule them all" package is the result of some random pkgbuild found online. Looks safe to me, amirite? Some variants of it can be found in lutris runners.'
url='https://github.com/Tk-Glitch/PKGBUILDS/tree/master/wine-tkg-git'
arch=('x86_64')

# Only pass the staticlibs option to system-wide installs
if [ "$_EXTERNAL_INSTALL" != "true" ]; then
  _makepkg_options+=('staticlibs')
fi

# Use ccache if available
if pacman -Qq ccache &> /dev/null; then
  msg2 'ccache was found and will be used'
  _makepkg_options+=('ccache')
else
  msg2 'ccache was not found and will not be used'
fi

options=(${_makepkg_options[@]})

license=('LGPL')
depends=(
    'attr'                  'lib32-attr'
    'fontconfig'            'lib32-fontconfig'
    'lcms2'                 'lib32-lcms2'
    'libxml2'               'lib32-libxml2'
    'libxcursor'            'lib32-libxcursor'
    'libxrandr'             'lib32-libxrandr'
    'libxdamage'            'lib32-libxdamage'
    'libxi'                 'lib32-libxi'
    'gettext'               'lib32-gettext'
    'freetype2'             'lib32-freetype2'
    'glu'                   'lib32-glu'
    'libsm'                 'lib32-libsm'
    'gcc-libs'              'lib32-gcc-libs'
    'libpcap'               'lib32-libpcap'
    'faudio'                'lib32-faudio'
    'desktop-file-utils'
)

makedepends=('git' 'autoconf' 'ncurses' 'bison' 'perl' 'fontforge' 'flex'
    'gcc>=4.5.0-2'
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'gnutls'                'lib32-gnutls'
    'libxinerama'           'lib32-libxinerama'
    'libxcomposite'         'lib32-libxcomposite'
    'libxmu'                'lib32-libxmu'
    'libxxf86vm'            'lib32-libxxf86vm'
    'libldap'               'lib32-libldap'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'alsa-lib'              'lib32-alsa-lib'
    'libxcomposite'         'lib32-libxcomposite'
    'mesa'                  'lib32-mesa'
    'libgl'                 'lib32-libgl'
    'libxslt'               'lib32-libxslt'
    'libpulse'              'lib32-libpulse'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'gst-plugins-good'      'lib32-gst-plugins-good'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'samba'                 'schedtool'
    'meson'                 'ninja'
    'glslang'               'wget'
    'ocl-icd'               'lib32-ocl-icd'
    'opencl-headers'
)

# vkd3d deps
if [ "$_use_vkd3d" == "true" ]; then
  makedepends+=('vkd3d' 'lib32-vkd3d')
fi

# proton-tkg deps
if [ -e "$_where"/proton_tkg_token ]; then
  makedepends+=('fontforge' 'python-fonttools')
  depends+=('tk')
fi

# wine-mono deps
if [ "$_use_mono" == "true" ]; then
  depends+=('wine-mono')
fi

optdepends=(
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'libldap'               'lib32-libldap'
    'gnutls'                'lib32-gnutls'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'libpulse'              'lib32-libpulse'
    'alsa-plugins'          'lib32-alsa-plugins'
    'alsa-lib'              'lib32-alsa-lib'
    'libjpeg-turbo'         'lib32-libjpeg-turbo'
    'libxcomposite'         'lib32-libxcomposite'
    'libxinerama'           'lib32-libxinerama'
    'ncurses'               'lib32-ncurses'
    'libxslt'               'lib32-libxslt'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'cups'                  'zapcc'
    'samba'                 'clang'
    'dosbox'                'ccache'
    'faudio'                'lib32-faudio'
    'mingw-w64-gcc'
)

# Wine source
if [ "$_plain_mirrorsrc" == "true" ]; then
  _winesrcdir="wine-mirror-git"
  _winesrctarget="git+https://github.com/wine-mirror/wine.git"
else
  _winesrcdir="wine-git"
  _winesrctarget="git://source.winehq.org/git/wine.git"
fi

find "$_where"/wine-tkg-patches -type f -not -path "*hotfixes*" -exec cp -n {} "$_where" \; # copy patches inside the PKGBUILD's dir to preserve makepkg sourcing and md5sum checking
cp "$_where"/wine-tkg-userpatches/*.my* "$_where" 2>/dev/null # copy userpatches inside the PKGBUILD's dir

source=("$_winesrcdir"::"${_winesrctarget}${_plain_commit}"
		"$_stgsrcdir"::"git+https://github.com/wine-staging/wine-staging.git${_staging_commit}"
		# game specific
		'poe-fix.patch' # Enable Path of Exile DX11 to work
		'f4skyrimse-fix-1.patch' # Fo4 & Skyrim SE Script Extender fix 1/2 (merged with 12be24a)
		'f4skyrimse-fix-2-00451d5.patch' # Fo4 & Skyrim SE Script Extender fix 2/2 (for lower than 00451d5)
		'f4skyrimse-fix-2-be48a56.patch' # Fo4 & Skyrim SE Script Extender fix 2/2 (for lower than be48a56)
		'f4skyrimse-fix-2-4c750a3.patch' # Fo4 & Skyrim SE Script Extender fix 2/2 (for lower than 4c750a3)
		'f4skyrimse-fix-2.patch' # Fo4 & Skyrim SE Script Extender fix 2/2 (Fixed in 6672fc9+)
		'fortnite.patch' # Fortnite crashfix - Doesn't fix EAC/BE
		'mtga.patch' # Magic The Gathering: Arena crashfix
		'sims_2-fix-legacy.patch' # Sims 2 fix for <4.1
		'sims_2-fix-4.2-.patch' # Sims 2 fix for 4.2 and lower
		'sims_2-fix.patch' # Sims 2 fix for 4.3+
		'sims_3-oldnvidia.patch' # No.
		'mwo.patch' # Mechwarrior Online fix
		'pythonfix.patch' # Backported Python/Sims4 squash patch for <=3.18
		'resident_evil_4_hack.patch' # Fixes broken rendering
		'childwindow.patch' # Child window rendering support for vk - Fixes World of Final Fantasy and others
		'warframe-launcher.patch' # Fix for Warframe Launcher failing to update itself
		'ffxiv-launcher-workaround.patch' # Workaround for Final Fantasy XIV Launcher 404 error
		'leagueoflolfix.patch' # LoL 9.10+ fix - Requires vdso32 disabled (echo 0 > /proc/sys/abi/vsyscall32)
		'leagueoflolfix-944c4e8.patch' # LoL 9.10+ fix - Requires vdso32 disabled (echo 0 > /proc/sys/abi/vsyscall32) (<944c4e8)
		'overwatch-mfstub.patch' # Overwatch mf crash workaround
		'assettocorsa_hud_perf.patch' # Fix for Assetto Corsa performance drop when HUD elements are displayed
		'mk11.patch' # Fix for Mortal Kombat 11
		# esync
		'esync-staging-fixes-r1.patch' # For 3.10-3.16 - Untested on lower than 3.10
		'esync-staging-fixes-r2.patch' # For 3.17+
		'esync-staging-fixes-r3.patch' # For 3.20+
		'esync-no_alloc_handle.patch' # esync staging extended support patch (<4.5)
		'esync-compat-fixes-r1.patch'  # For 3.10-3.16 - Untested on lower than 3.10
		'esync-compat-fixes-r1.1.patch' # Addon for 3.14-3.16
		'esync-compat-fixes-r2.patch' # For 3.17+
		'esync-compat-fixes-r2.1.patch' # Addon for 3.19+ - non-staging only
		'esync-compat-fixes-r3.patch' # For 3.20+
		'esync-compat-fixes-r3.1.patch' # Addon for 4.4+
		'esync-compat-fixes-r3.2.patch' # Addon for 4.5+
		'esync-compat-fixes-r3.3.patch' # Addon for 4.6+ (b3c8d5d)
		'esync-compat-fixes-r3.4.patch' # Addon for 4.6+ (4c0e817)
		'esync-compat-fixes-r3.5.patch' # Addon for 4.6+ (f534fbd)
		'esync-compat-fixes-r3.6.patch' # Addon for 4.8+ (29914d5)
		'esync-no_kernel_obj_list.patch' # esync extended support patch (4.5+)
		# fsync
		'fsync-mainline.patch' # Fsync patchset, introduced with Proton 4.11-1
		'fsync-staging-cf04b8d.patch' # Fsync patchset, introduced with Proton 4.11-1 - Staging edition (<cf04b8d)
		'fsync-staging.patch' # Fsync patchset, introduced with Proton 4.11-1 - Staging edition
		'fsync-staging-no_alloc_handle.patch' # Add no_alloc_handle object method to fsync for staging
		# pba
		'PBA313-.patch' # For 3.10-3.13 - Untested on lower than 3.10
		'PBA314+.patch' # For 3.14-3.16
		'PBA317+.patch' # For 3.17-3.18
		# misc
		'wine-tkg.patch' # Do NOT report bugs at winehq when using custom build
		'wine-tkg-staging.patch' # Do NOT report bugs at winehq when using custom build - staging
		'steam.patch' # auto-append --no-sandbox
		'30-win32-aliases.conf' # 32-bit font antialiasing
		'use_clock_monotonic.patch' # Perf
		'use_clock_monotonic-2.patch' # Addon for the patch above, needed on 13e11d3+
		'lowlatency_audio.patch' # wine osu! lowlat patch
		'wine-binfmt.conf' # Enables launching windows executables directly
		'CSMT-toggle.patch' # Corrected CSMT switch logic
		'GLSL-toggle.patch' # Toggles OpenGL shading language
		'launch-with-dedicated-gpu-desktop-entry.patch'
		'plasma_systray_fix.patch' # Systray fix for winex11
		'faudio-exp.patch' # Faudio experimental support
		'enable_stg_shared_mem_def.patch' # Enable STAGING_SHARED_MEMORY by default
		'LAA-legacy.patch' # IMAGE_FILE_LARGE_ADDRESS_AWARE override (<4.2)
		'LAA-staging-legacy.patch' # Same as above, for staging
		'LAA.patch' # IMAGE_FILE_LARGE_ADDRESS_AWARE override
		'LAA-staging.patch' # Same as above, for staging
		'winevulkan-1.1.103.patch' # Update winevulkan
		'winevulkan-1.1.113.patch' # Update winevulkan
		'high-core-count-fix.patch' # High core count setup fix for <=4.0
		'nvidia-hate.patch' # novideo hate patch to disable nvapi, nvcuda etc.
		'virtual_desktop_refreshrate.patch' # Add custom fake refreshrate to virtual desktop
		'raw-input.patch' # Raw input fix by Guy1524
		'0001-kernelbase-Remove-DECLSPEC_HOTPATCH-from-SetThreadSt.patch' # Native dotnet workaround for 4.13+
		'usvfs.patch' # USVFS (Mod Organizer 2's virtual filesystem) patch
		'revert-c6b6935.patch' # Reverts c6b6935 due to https://bugs.winehq.org/show_bug.cgi?id=47752
		'proton-tkg-kernelbase-reverts.patch' # Reverts 05d0027, 0f5538b, c5dc41e, a5d45e9, 619bd16 and 8d25965 (moving various funcs to kernelbase). This is required for proton-tkg and fixes some dll loading issues (with Cemu notably)
		'proton-tkg-staging-kernelbase-reverts.patch' # Staging version of the above patch
		# proton
		'FS_bypass_compositor.patch' # Perf
		'raw-valve_proton_fullscreen_hack-staging.patch' # Proton FS hack for staging raw input impl
		'raw-valve_proton_fullscreen_hack-staging-c0389b0.patch' # Proton FS hack for staging raw input impl (<c0389b0)
		'valve_proton_fullscreen_hack-staging.patch' # Proton FS hack
		'valve_proton_fullscreen_hack-staging-938dddf.patch' # Proton FS hack (<938dddf)
		'valve_proton_fullscreen_hack-staging-de64501.patch' # Proton FS hack (<de64501)
		'valve_proton_fullscreen_hack-staging-82c6ec3.patch' # Proton FS hack (<82c6ec3)
		'valve_proton_fullscreen_hack-staging-4.6.patch' # Proton FS hack for <=4.6
		'valve_proton_fullscreen_hack-staging-4.5-a4b9460.patch' # Proton FS hack for <=4.5-a4b9460
		'valve_proton_fullscreen_hack-staging-4.5.patch' # Proton FS hack for <=4.5
		'valve_proton_fullscreen_hack-staging-4.4.patch' # Proton FS hack for <=4.4
		'valve_proton_fullscreen_hack-staging-legacy.patch' # Proton FS hack for <=3.16 masochists
		'valve_proton_fullscreen_hack_realmodes.patch' # Real modes listing in FS hack
		'winevulkan-1.1.113-proton.patch' # Update winevulkan - Proton edition
		'proton-tkg-8d25965.patch' # Proton-tkg (<8d25965)
		'proton-tkg-619bd16.patch' # Proton-tkg (<619bd16)
		'proton-tkg-eafb4af.patch' # Proton-tkg (<eafb4af)
		'proton-tkg-0116660.patch' # Proton-tkg (<0116660)
		'proton-tkg-09f588e.patch' # Proton-tkg (<09f588e)
		'proton-tkg-05d0027.patch' # Proton-tkg (<05d0027)
		'proton-tkg-0bebbba.patch' # Proton-tkg (<0bebbba)
		'proton-tkg.patch' # Proton-tkg
		'proton-tkg-rpc.patch' # necessary pre-patch for Proton-tkg
		'proton-tkg-staging-8d25965.patch' # Proton-tkg-staging (<8d25965)
		'proton-tkg-staging-619bd16.patch' # Proton-tkg-staging (<619bd16)
		'proton-tkg-staging-eafb4af.patch' # Proton-tkg-staging (<eafb4af)
		'proton-tkg-staging-0116660.patch' # Proton-tkg-staging (<0116660)
		'proton-tkg-staging-09f588e.patch' # Proton-tkg-staging (<09f588e)
		'proton-tkg-staging-05d0027.patch' # Proton-tkg-staging (<05d0027)
		'proton-tkg-staging-0bebbba.patch' # Proton-tkg-staging (<0bebbba)
		'proton-tkg-staging.patch' # Proton-tkg-staging
		'proton-tkg-staging-rpc.patch' # necessary pre-patch for Proton-tkg-staging
		'msvcrt_nativebuiltin.patch' # Enforce mscvrt Dlls to native then builtin - from Proton
		'msvcrt_nativebuiltin-eafb4aff.patch' # Enforce mscvrt Dlls to native then builtin - from Proton (<eafb4aff)
		'proton-sdl-joy.patch' # Proton SDL joystick support
		'proton-sdl-joy-2.patch' # Proton SDL joystick support additions for newer trees
		'proton-gamepad-additions-50b9456.patch' # Proton 4.2-5 xinput hacks and other gamepad additions (<50b9456)
		'proton-gamepad-additions-3d011fc.patch' # Proton 4.2-5 xinput hacks and other gamepad additions (<3d011fc)
		'proton-gamepad-additions-f8a04c7.patch' # Proton 4.2-6 xinput hacks and other gamepad additions (<f8a04c7)
		'proton-gamepad-additions-9c6ea01.patch' # Proton 4.2-6 xinput hacks and other gamepad additions (<9c6ea01)
		'proton-gamepad-additions-4413770.patch' # Proton 4.2-7 xinput hacks and other gamepad additions (<4413770(staging))
		'proton-gamepad-additions-d2d3959.patch' # Proton 4.2-7 xinput hacks and other gamepad additions (<d2d3959)
		'proton-gamepad-additions-fcfeaf0.patch' # Proton 4.11-1 xinput hacks and other gamepad additions (<fcfeaf0(staging))
		'proton-gamepad-additions-8db70e9.patch' # Proton 4.11-3 xinput hacks and other gamepad additions (<8db70e9)
		'proton-gamepad-additions.patch' # Proton 4.11-3 xinput hacks and other gamepad additions
		'proton-vk-bits-4.5.patch' # Proton vk bits for 4.5+
		'proton-restore-unicode.patch' # Restore installing wine/unicode.h to please Proton
		'raw-input-proton.patch' # Raw input fix by Guy1524, to apply against the proton fs hack patchset
		'raw-input-proton-7349182.patch' # Raw input fix by Guy1524, to apply against the proton fs hack patchset (<7349182(staging))
		'proton_mf_hacks-7c5fcff.patch' # Workarounds to prevent crashes on some mf functions (<7c5fcff)
		'proton_mf_hacks.patch' # Workarounds to prevent crashes on some mf functions
		'proton-wined3d-additions.patch' # Proton non-vr-related wined3d additions
)

md5sums=('SKIP'
         'SKIP'
         'a49bc2bb374d5ea5045ada5401cd91a3'
         '16acd00eb3ccc65687850002b818859c'
         '5e3002826a916a16130c567db763dfc5'
         'af2d42c450cb45049224faf825e7fc3b'
         '134937095639e80fe7fb5aac12177686'
         '496204bf74c34db41dfc3f4075375145'
         'f50501943759c8731d40eb521e36e6da'
         'af6b455bdace212157b9a6652ee88d41'
         '6e301f262f004b930ffc3000839d837b'
         'cd52a9b26c15fd210cd5ed1da178dcb1'
         '65906da954430bde504dd47a69f23f6f'
         '342a6e02f73c06120ce01cc887489d9c'
         'd34ec9e86cbbf48b485a8c6f99d24921'
         'a527081e5f6eca3aec0b390d96d8587b'
         'f063189ec090d9071397d455d271199d'
         '373b743313c927499a3336980274234b'
         '5b07ab957a128801b6c45e30b31432a7'
         '25b6bb1032c5d78204c7847c00cc9620'
         '5fb270e0f3ff18852774fcebca3956ab'
         '37c1daa7dc989412e5ced603f91ef3d0'
         'cf308e18ad3724e4872280ec35e25338'
         '8a6d9ad92d3becae6bd9dbb05d7d6f48'
         '846bc9a840b5f2527855c17378b1718c'
         'dd993e03188c86631e6c2cbdf14113aa'
         'b997bf4bae2d08f7e84870c8c91fb08b'
         '374ffc1d29488dd3fdac7d01f55964d4'
         '46f612602ee7698b840a4e757194cfa7'
         '3a263a0f6211287af53ea7db79b1f34f'
         '4e1b9cc09a01749c07230c7241526371'
         'c4b104892b0501781789aadc5a95b261'
         'e32c770f6aa964e6093fe734c7dd6c0a'
         'd86e0feaeb690efe521ac3cc852fac12'
         'f3c95dcaeab28d8b97e80a5e9d9a1c01'
         'b10e6f8732dbc1e07b59730f9aeea21e'
         '2235fbda559247a0eb0d37d9fd6d87b5'
         '85140d04dfeb80619c9d6c90bc89f925'
         '358093d65dba3fa477065fe21ce85874'
         'f80f0a4743b4a3e39c523b85c46e13d5'
         '83696ccf73ee8f6d1b68f0023716bdf4'
         '78bac45e2d8c9466ca74c3c6a37bf248'
         'dcb0d65c67f87779af974f0899851308'
         'ed9467125c3771a0307acc9aeb9e95ee'
         'ff418685a55dbe3d4a14dfd1c9cde41c'
         '0a8e5406472ae39c0687bc017edfb352'
         'c77e94d56f57d27dd26e9f99cbcd5bc3'
         'd27ec22ee6815a97b4d28ccdfc0420fe'
         '620823d02d9278f44924780d28cf7221'
         '898fe6be699c16ef95ffb24aa752c98b'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '1ff4e467f59409272088d92173a0f801'
         '517a67b31d26990e6704074ccb630f80'
         'd2e54ed8d69b808c26065e643b2244bb'
         'ed6060dc030ebd5865f1fcc40d8863be'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         '65d47ea14d7c666d6308fc65a5ccd729'
         '3aafb27f35d4817942085d87904dcfc8'
         '927f39348cd29ce9876871e4edb15a09'
         '6262b0ff26fd1e00eb6123db5e0a4160'
         '07b48859d0b274c9b35be4de3016ae27'
         '3cb83a83c7ed9335eddbef665f4d89f9'
         '25e20e66ee3b2896f2979ba4e16ff767'
         '8427bb8d40cc49bc1de3a53ed82254ad'
         '3034b1a397cad46feb641cb3d7dc8584'
         '1c4738e438debf72266b96d09f465b25'
         '9cabed407e00dc03ec4cd9e023285d76'
         'd047619c11d95c4c9bbefae564876950'
         'bcf6dd7c16f37f20cca6ec4edfab5b34'
         'b415db953ef35b73c1608bc360356113'
         '81e4daf39eac2fa996249195bc2cb4ea'
         'eba48702691263469da644495f9e1bfd'
         '566ffc5356fc4713108185f9fd870038'
         '180accf6a6ea2102956716c863e2bfda'
         '634c6f10d973a1b27e0148ad35df62ce'
         '45c4ddc0b4c8e1dac0a7f5b35b683aa0'
         '5ca4ee142eafe2c8873d59b2feb51a7d'
         '17c64d0e5fa155868c10c6a7b18cf5df'
         '2dab489ea8770576652302efaa525141'
         '5c58e179f8001cddbf05871a2483f131'
         '126f11c8ea4bc4bdb8a07f8724712564'
         'a21dd4c345c597bc2f9204ea253794d3'
         '46f69d6e2911afdce9a5e446aca3982a'
         '89e55abb8bbfb8a077eb7f2fb5d197e3'
         'd0a632b9fcab1a06baee8ad6ec515473'
         'c7eb87afb00130d687b8e5496b859da6'
         '1f9b4f02e9e8f1ec9261568e13a1fdf3'
         '962fa3a5a4c5fd57b9f4715ed587fbe6'
         '4df9cd990a78606d3cd0dc0673bb141f'
         '15995e43af57b18bf7b45cc2d5af4f2d'
         '6f7cc6eb54f700d57006897e8c50a6a3'
         '0fecb4c7b114adaf4ea631b484939f59'
         'cd0cb1517cdde6fa60296ea452816ee9'
         '7ef6961b9a54d93ba970a2af827bb969'
         '5f4fee214ec0d94decb19309caf8ec6e'
         '333469023e6e55496c4ec28518f87a3f'
         '5af0c5ae73a70bd3215564d95a80a78e'
         '87a735dc5c2f198ee23bba31e4fd420d'
         '7d9a7cf523c7283c64266148707b8bac'
         'fbc02256e0e85668be75e0275637d6c1'
         '4aa05580e78d36fdbd80f2ef2f46a6b3'
         'ce0332f66626399574d79d10642896d2'
         '09274cf0d0b8775afa040f2cdc2a03e0'
         'd20a871566773b7d71c443383ddfb272'
         '3d55df1bc8677b16a41d7e6b555a609a'
         '28b66f6d107082e7dd50a4f842c42bef'
         '6cfe06d186016a5c246920a3ccb1c05d'
         'f404adafc8648495270e01241cd0601e'
         '017e316df9b4a6aada912f3a83e16b08'
         '22d3b0b1ff7f2104312b5eb29959cb2e'
         '52f11ca72f4ee06bd2a4bc2b0314e631'
         '6d3b224e1e6dc858af0480fecaaa8876'
         '2cf363e936aa87450c79bd131eea1f9f'
         'ef9d49400425109ed6e7c39060a0e27e'
         'fee4328b205727568bbe73e0170eb259'
         'd104f44859c50920a7986585ea937e42'
         'ce78256889b5c364d18e8bdb7ab4230e'
         'f1b585f7bed515379038b57a5ca34c18'
         '027d0fe42c483f02f2e0bfffbdda8e5b'
         '656cec36554c499ff1681d56b76fba47'
         'dbfbe90139f3df928df6e96f1759d7e8'
         '3a4e77d80bc2d645266bed6979dc0da9'
         'eea40375be4cd3615eaef5412802274b'
         '72d50c442cb34ec7a46998636a63c424'
         'd8616d47efbe0465cda808abb0e9ac5b'
         '9b74ad2e9c6881f27c7eab0299ecc2c2'
         '7857d05adb1227532f11b1c103f67126'
         'c463c6eb0ee5aaf533270a88bf5e272c')

if [ "$_EXTERNAL_INSTALL" == "true" ]; then
  provides=(
    "$pkgname=$pkgver"
  )
  conflicts=("$pkgname")
else
  provides=(
    "wine=$pkgver"
    "wine-wow64=$pkgver"
    "wine-staging=$pkgver"
    "wine-esync=$pkgver"
  )
  conflicts=('wine' 'wine-wow64' 'wine-staging' 'wine-esync')
fi

makedepends=("${makedepends[@]}" "${depends[@]}")
install=wine.install

nonuser_patcher() {
  if [ "$_NUKR" != "debug" ] || [ "$_DEBUGANSW1" == "y" ]; then
    msg2 "Applying ${_patchname}" && patch -Np1 < ../"$_patchname" && echo "${_patchmsg}" >> "$_where"/last_build_config.log
  fi
}

pkgver() {
	if [ "$_use_staging" == "true" ]; then
	  cd "${srcdir}/${_stgsrcdir}"
	else
	  cd "${srcdir}/${_winesrcdir}"
	fi

	# retrieve current wine version - if staging is enabled, staging version will be used instead
	_describe_wine
}

prepare() {
	# state tracker start - FEAR THE MIGHTY FROG MINER
	touch "${_where}"/BIG_UGLY_FROGMINER

	# Check for mingw-w64-gcc
	if [ "$_IGNORE_MINGWCHECK" != "true" ] && [ "$_NOMINGW" != "true" ] && [ -z "$CUSTOM_MINGW_PATH" ]; then
	  if pacman -Qq mingw-w64-gcc &> /dev/null; then
	    msg2 'mingw-w64-gcc was found and will be used'
	  else
	    error 'mingw-w64-gcc was not found on your system.'
	    msg2 'It is not a hard requirement but is recommended to build current versions of wine.'
	    msg2 'Do you want to launch mingw installation script now?'
	    read -rp "`echo $'     > N/y : '`" _mingwansw;
	    if [ "$_mingwansw" == "y" ]; then
	      cd "$_where"/../mingw && ./mingw-on-arch-automator.sh
	      kill $(pgrep mingw-on-arch)
	    fi
	  fi
	elif [ "$_NOMINGW" == "true" ]; then
	  _configure_args+=(--without-mingw)
	fi

	# prepare steps
	_source_cleanup
	_prepare
}

build() {
  _prebuild_common

  local _prefix=/usr
  local _lib32name="lib32"
  local _lib64name="lib"

  # configure args
  if [ -n "$_configure_userargs64" ]; then
    _configure_args+=($_configure_userargs64)
  fi
  if [ -n "$_configure_userargs32" ]; then
    _configure_args+=($_configure_userargs32)
  fi

  # External install
  if [ "$_EXTERNAL_INSTALL" == "true" ]; then
    if [ "$_EXTERNAL_INSTALL_TYPE" != "proton" ]; then
      _prefix="$_DEFAULT_EXTERNAL_PATH/$pkgname-$_realwineversion"
    elif [ "$_EXTERNAL_INSTALL_TYPE" == "proton" ]; then
      _prefix="$_where"
      _configure_args+=(--without-curses)
    fi
  else
    _configure_args64+=(--libdir="$_prefix/$_lib64name")
    _configure_args32+=(--libdir="$_prefix/$_lib32name")
  fi

  _build
}

package() {
  _package_makepkg
}

trap exit_cleanup EXIT
