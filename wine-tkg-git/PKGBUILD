# Created by: Tk-Glitch <ti3nou at gmail dot com>

pkgname=wine-tkg-git
pkgver=4.0rc3.r0.gb1066c70

# workaround for pkgrel overwritten on regen, part 1
_truepkgrel=106
pkgrel=1

_winesrcdir='wine-git'
_stgsrcdir='wine-staging-git'
_pbasrcdir='wine-pba'
_esyncsrcdir='esync'
_dxvksrcdir='dxvk'
_where=$PWD # track basedir as different Arch based distros are moving srcdir around

cp "$_where"/wine-tkg-patches/* "$_where" # copy patches inside the PKGBUILD's dir to preserve makepkg sourcing and md5sum checking

source "$_where"/customization.cfg # load default configuration from file

# Load external configuration file if present. Available variable values will overwrite customization.cfg ones.
if [ -e ~/.config/frogminer/wine-tkg.cfg ]; then
  source ~/.config/frogminer/wine-tkg.cfg && msg2 "External configuration file ~/.config/frogminer/wine-tkg.cfg will be used to override customization.cfg values." && msg2 ""
fi

if [ "$_NOINITIALPROMPT" == "true" ]; then
  msg2 'Initial prompt skipped. Do you remember what it said? 8)'
else
  # If the state tracker isn't found, prompt the user with useful stuff.
  # This is to prevent the prompt to come back until packaging is done
  if [ ! -e "$_where"/BIG_UGLY_COINMINER ]; then
    msg2 '#################################################################'
    msg2 ''
    msg2 'You can configure your wine build flavour (right now for example)'
    if [ -e ~/.config/frogminer/wine-tkg.cfg ]; then
      msg2 'by editing the ~/.config/frogminer/wine-tkg.cfg file.'
      msg2 ''
      msg2 'In case you are only using a partial config file, remaining'
      msg2 'values will be loaded from the customization.cfg file next to'
      msg2 'this PKGBUILD.'
    else
      msg2 'by editing the customization.cfg file next to this PKGBUILD,'
      msg2 'or by creating ~/.config/frogminer/wine-tkg.cfg to override'
      msg2 'some or all of its values.'
    fi
    msg2 ''
    msg2 'Set _LOCAL_OPTIMIZED to "false" if you want to share the package !'
    msg2 ''
    msg2 "Current path is '$_where'"
    msg2 ''
    msg2 'If you are rebuilding using the same configuration, you may want'
    msg2 'to delete/move previously built package if in the same dir.'
    msg2 ''
    msg2 '###################################TkG##########was##########here'
    read -p "When you are ready, press enter to continue."

    if [ -e ~/.config/frogminer/wine-tkg.cfg ]; then
      source ~/.config/frogminer/wine-tkg.cfg && msg2 "External config loaded" # load external configuration from file again, in case of changes.
    else
      source "$_where"/customization.cfg # load configuration from file again, in case of changes.
    fi
  fi
fi

if [ -n "$_PKGNAME_OVERRIDE" ]; then
  if [[ $_PKGNAME_OVERRIDE == "none" ]]; then
    pkgname="${pkgname}"
  else
    pkgname="${pkgname}-${_PKGNAME_OVERRIDE}"
  fi
  msg2 "Overriding default pkgname. New pkgname: ${pkgname}"
else
  if [[ $_use_staging == "true" ]]; then
    pkgname="${pkgname/%-git/-staging-git}"
    msg2 "Using staging patchset"
  fi

  if [[ $_use_esync == "true" ]]; then
    pkgname="${pkgname/%-git/-esync-git}"
    msg2 "Using esync (${_esync_version}) patchset"
  fi

  if [[ $_use_pba == "true" ]]; then
    pkgname="${pkgname/%-git/-pba-git}"
    msg2 "Using pba patchset"
  fi

  if [[ $_use_gallium_nine == "true" ]]; then
    pkgname="${pkgname/%-git/-nine-git}"
    msg2 "Using gallium nine patchset"
  fi

  if [[ $_use_vkd3d == "true" ]]; then
    pkgname="${pkgname/%-git/-vkd3d-git}"
    msg2 "Using VKD3D for d3d12 translation"
  fi

  if [[ $_use_dxvk == "true" ]]; then
    pkgname="${pkgname/%-git/-dxvk-git}"
    msg2 "Using DXVK winelib for d3d10 and d3d11 translation"
  fi

  if [[ $_use_faudio == "true" ]]; then
    pkgname="${pkgname/%-git/-faudio-git}"
    msg2 "Using Faudio for xaudio2"
  fi

  if [[ $_LOCAL_OPTIMIZED == "true" ]]; then
    pkgname="${pkgname/%-git/-optimized-git}"
    msg2 "Using native processor optimizations"
  else
    msg2 "Using makepkg.conf optimization flags"
  fi
fi

# External install
if [[ $_EXTERNAL_INSTALL == "true" ]]; then
  pkgname="${pkgname/%-git/-$_EXTERNAL_INSTALL_TYPE-git}"
  if [[ $_EXTERNAL_INSTALL_TYPE == "lutris" ]]; then
    _DEFAULT_EXTERNAL_PATH=$_LUTRIS_RUNNERS_PATH
  fi
  msg2 "Installing to $_DEFAULT_EXTERNAL_PATH/$pkgname"
fi

# custom plain wine commit to pass to git
if [ $_use_staging == "false" ] && [ -n "$_plain_version" ]; then
  _plain_commit="#commit=$_plain_version"
fi

# custom staging commit to pass to git
if [ $_use_staging == "true" ] && [ -n "$_staging_version" ]; then
  _staging_commit="#commit=$_staging_version"
fi

# custom dxvk commit to pass to git
if [ $_use_dxvk == "true" ]; then
  _dxvk_commit="#commit=$_dxvk_version"
fi

pkgdesc='This "Wine to rule them all" package is the result of some random pkgbuild found online. Looks safe to me, amirite? Some variants of it can be found in lutris runners.'
url='https://github.com/Tk-Glitch/PKGBUILDS/tree/master/wine-tkg-git'
arch=('x86_64')

if pacman -Qq ccache &> /dev/null; then
  msg2 'ccache was found and will be used'
  options=('staticlibs' 'ccache')
else
  msg2 'ccache was not found and will not be used'
  options=('staticlibs')
fi

license=('LGPL')
depends=(
    'attr'                  'lib32-attr'
    'fontconfig'            'lib32-fontconfig'
    'lcms2'                 'lib32-lcms2'
    'libxml2'               'lib32-libxml2'
    'libxcursor'            'lib32-libxcursor'
    'libxrandr'             'lib32-libxrandr'
    'libxdamage'            'lib32-libxdamage'
    'libxi'                 'lib32-libxi'
    'gettext'               'lib32-gettext'
    'freetype2'             'lib32-freetype2'
    'glu'                   'lib32-glu'
    'libsm'                 'lib32-libsm'
    'gcc-libs'              'lib32-gcc-libs'
    'libpcap'               'lib32-libpcap'
    'desktop-file-utils'
)
makedepends=('git' 'autoconf' 'ncurses' 'bison' 'perl' 'fontforge' 'flex'
    'gcc>=4.5.0-2'
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'gnutls'                'lib32-gnutls'
    'libxinerama'           'lib32-libxinerama'
    'libxcomposite'         'lib32-libxcomposite'
    'libxmu'                'lib32-libxmu'
    'libxxf86vm'            'lib32-libxxf86vm'
    'libldap'               'lib32-libldap'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'alsa-lib'              'lib32-alsa-lib'
    'libxcomposite'         'lib32-libxcomposite'
    'mesa'                  'lib32-mesa'
    'libgl'                 'lib32-libgl'
    'libxslt'               'lib32-libxslt'
    'libpulse'              'lib32-libpulse'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'samba'                 'schedtool'
    'meson'                 'ninja'
    'glslang'               'wget'
)
# We need wine installed to build DXVK winelib
if [[ $_use_dxvk == true ]]; then
  makedepends=("${makedepends[@]}" wine)
fi

# vkd3d deps
if [[ $_use_vkd3d == true ]]; then
  makedepends=("${makedepends[@]}" vkd3d lib32-vkd3d)
fi

# faudio deps
if [[ $_use_faudio == true ]]; then
  makedepends=("${makedepends[@]}" faudio-git lib32-faudio-git)
fi
optdepends=(
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'libldap'               'lib32-libldap'
    'gnutls'                'lib32-gnutls'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'libpulse'              'lib32-libpulse'
    'alsa-plugins'          'lib32-alsa-plugins'
    'alsa-lib'              'lib32-alsa-lib'
    'libjpeg-turbo'         'lib32-libjpeg-turbo'
    'libxcomposite'         'lib32-libxcomposite'
    'libxinerama'           'lib32-libxinerama'
    'ncurses'               'lib32-ncurses'
    'libxslt'               'lib32-libxslt'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'cups'                  'zapcc'
    'samba'                 'clang'
    'dosbox'                'ccache'
)
source=("$_winesrcdir"::"git://source.winehq.org/git/wine.git${_plain_commit}"
		"$_stgsrcdir"::"git+https://github.com/wine-staging/wine-staging.git${_staging_commit}"
		"$_dxvksrcdir"::"git+https://github.com/doitsujin/dxvk.git${_dxvk_commit}"
		"esync${_esync_version}.tgz::https://github.com/zfigura/wine/releases/download/esync${_esync_version}/esync.tgz"
		# game specific
		'poe-fix.patch' # Enable Path of Exile DX11 to work
		'f4skyrimse-fix.patch' # Fo4 & Skyrim SE Script Extender fix
		'fallout4.patch' # Fallout 4 dsound fix
		'fortnite.patch' # Fortnite crashfix - Doesn't fix EAC/BE
		'mtga.patch' # Magic The Gathering: Arena crashfix
		'sims_2-fix.patch' # Sims 2 fix
		'sims_3-oldnvidia.patch' # No.
		'RtlWaitOnAddress-race.patch' # Better fix for star citizen
		# esync
		'esync-staging-fixes-r1.patch' # For 3.10-3.16 - Untested on lower than 3.10
		'esync-staging-fixes-r2.patch' # For 3.17+
		'esync-staging-fixes-r3.patch' # For 3.20+
		'esync-compat-fixes-r1.patch'  # For 3.10-3.16 - Untested on lower than 3.10
		'esync-compat-fixes-r1.1.patch' # Addon for 3.14-3.16
		'esync-compat-fixes-r2.patch' # For 3.17+
		'esync-compat-fixes-r2.1.patch' # Addon for 3.19+ - non-staging only
		'esync-compat-fixes-r3.patch' # For 3.20+
		'esync-no_alloc_handle.patch' # esync staging extended support patch
		# pba
		'PBA313-.patch' # For 3.10-3.13 - Untested on lower than 3.10
		'PBA314+.patch' # For 3.14-3.16
		'PBA317+.patch' # For 3.17-3.18
		'PBA318+.patch' # For 3.18+ (devel, up to 1596238)
		'PBA319+.patch' # For 3.19+
		'PBA320+.patch' # For 3.20+
		'PBA321+.patch' # For 3.21+
		# misc
		'steam.patch' # auto-append --no-sandbox
		'30-win32-aliases.conf' # 32-bit font antialiasing
		'use_clock_monotonic.patch' # Perf
		'lowlatency_audio.patch' # wine osu! lowlat patch
		'wine-binfmt.conf' # Enables launching windows executables directly
		'CSMT-toggle.patch' # Corrected CSMT switch logic
		'GLSL-toggle.patch' # Toggles OpenGL shading language
		'launch-with-dedicated-gpu-desktop-entry.patch'
		'plasma_systray_fix.patch' # Systray fix for winex11
		'dxvk-winelib.patch' # Enables DXVK winelib building
		'FS_bypass_compositor.patch' # Perf
		'faudio-exp.patch' # Faudio experimental support
		'valve_proton_fullscreen_hack-staging.patch' # Proton FS hack
		'large_address_aware.patch' # IMAGE_FILE_LARGE_ADDRESS_AWARE override
		'large_address_aware-staging.patch' # Same as above, for staging
)

if [[ $_EXTERNAL_INSTALL != "true" ]]; then
  provides=(
    "wine=$pkgver"
    "wine-wow64=$pkgver"
    "wine-staging=$pkgver"
    "wine-esync=$pkgver"
  )
  conflicts=('wine' 'wine-wow64' 'wine-staging' 'wine-esync')
fi
makedepends=(${makedepends[@]} ${depends[@]})
install=wine.install

user_patcher() {
	# To patch the user because all your base are belong to us
	if [[ $(find "$_where" -name "*.${_userpatch_ext}patch") ]]; then
	  if [ "$_user_patches_no_confirm" != "true" ]; then
	  read -p "At least one of your own ${_userpatch_target} patches were found (*.${_userpatch_ext}patch). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" _CONDITION;
	  fi
	  if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
	    for _f in "$_where"/*.${_userpatch_ext}patch; do
	    if [ -e "${_f}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Applying your own ${_userpatch_target} patch ${_f}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 < "${_f}"
	      echo "Applied your own patch ${_f}" >> "$_where"/last_build_config.log
	    fi
	    done
	  fi
	fi
	if [[ $(find "$_where" -name "*.${_userpatch_ext}revert") ]]; then
	  if [ "$_user_patches_no_confirm" != "true" ]; then
	  read -p "At least one of your own ${_userpatch_target} 'to revert' patches were found (*.${_userpatch_ext}revert). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" _CONDITION;
	  fi
	  if [ "$_CONDITION" == "y" ] || [ "$_user_patches_no_confirm" == "true" ]; then
	    for _f in "$_where"/*.${_userpatch_ext}revert; do
	    if [ -e "${_f}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Reverting your own ${_userpatch_target} patch ${_f}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 -R < "${_f}"
	      echo "Reverted your own patch ${_f}" >> "$_where"/last_build_config.log
	    fi
	    done
	  fi
	fi
}

pkgver() {
	if [ $_use_staging == "true" ]; then
	  cd "${srcdir}/${_stgsrcdir}"
	else
	  cd "${srcdir}/${_winesrcdir}"
	fi

	# retrieve current wine version - if staging is enabled, staging version will be used instead
	git describe --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g;s/^v//;s/\.rc/rc/;s/^wine\.//'
}

prepare() {
	# state tracker start - FEAR THE MIGHTY COIN MINER
	touch "${_where}"/BIG_UGLY_COINMINER

	cd "${srcdir}"/"${_stgsrcdir}"

	# restore the targetted trees to their git origin state
	# for the patches not fail on subsequent aborted builds
	msg2 'Cleaning wine-staging source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	cd "${srcdir}"/"${_dxvksrcdir}"

	msg2 'Cleaning dxvk source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	cd "${srcdir}"/"${_winesrcdir}"

	msg2 'Cleaning wine source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	if [ $_use_staging == "true" ]; then
	  # change back to the wine upstream commit that this version of wine-staging is based in
	  msg2 'Changing wine HEAD to the wine-staging base commit...'
	  git checkout "$(../"$_stgsrcdir"/patches/patchinstall.sh --upstream-commit)"
	fi

	# output config to logfile
	echo "# Last $pkgname configuration :" > "$_where"/last_build_config.log
	echo "" >> "$_where"/last_build_config.log

	if [ $_use_staging == "false" ] && [ -n "$_plain_version" ]; then
	  echo "Using custom plain wine commit $_plain_version" >> "$_where"/last_build_config.log # output to log
	fi

	if [ $_use_staging == "true" ] && [ -n "$_staging_version" ]; then
	  echo "Using custom staging commit $_staging_version" >> "$_where"/last_build_config.log # output to log
	fi

	if [ $_use_staging == "true" ]; then
	  echo "Using staging patchset" >> "$_where"/last_build_config.log
	fi

	if [ $_use_esync == "true" ]; then
	  echo "Using esync (${_esync_version}) patchset" >> "$_where"/last_build_config.log
	fi

	if [ $_use_pba == "true" ]; then
	  # If using a wine version that includes f17544a, apply 3.21+ fixes
	  if git merge-base --is-ancestor f17544a77c0e56d61a72220119c187e0d25278e4 HEAD; then # wined3d: Get rid of vram_bytes from struct wined3d_adapter
	    _pba_version="321+"
	  # If using a wine version that includes 45bf952, apply 3.20+ fixes
	  elif git merge-base --is-ancestor 45bf95278d669779e6ca3cde9215556a043a8cf8 HEAD; then # wined3d: Store resource bind flags in the wined3d_resource structure
	    _pba_version="320+"
	  # If using a wine version that includes 1596238, apply 3.19+ fixes
	  elif git merge-base --is-ancestor 15962381e2d52a3e56a0ab352c6e208d80f7cde3 HEAD; then # wined3d: Introduce a separate structure for OpenGL buffer information
	    _pba_version="319+"
	  # If using a wine version that includes 944e92b, apply 3.18+ fixes
	  elif git merge-base --is-ancestor 944e92ba06ecadeb933d95e30035323483dfe7c7 HEAD; then # wined3d: Pass the wined3d_buffer_desc structure directly to buffer_init()
	    _pba_version="318+"
	  # If using a wine version that includes 580ea44, apply 3.17+ fixes
	  elif git merge-base --is-ancestor 580ea44bc65472c0304d74b7e873acfb7f680b85 HEAD; then # wined3d: Use query buffer objects for occlusion queries
	    _pba_version="317+"
	  # If using a wine version that includes cf9536b, apply 3.14+ fixes
	  elif git merge-base --is-ancestor cf9536b6bfbefbf5003c7633446a91f6e399c4de HEAD; then # wined3d: Move OpenGL initialisation code to adapter_gl.c
	    _pba_version="314+"
	  else
	    _pba_version="313-"
	  fi
	fi

	if [ $_use_gallium_nine == "true" ]; then
	  echo "Using gallium nine patchset" >> "$_where"/last_build_config.log
	fi

	if [ $_use_vkd3d == "true" ]; then
	  _withvkd3d='--with-vkd3d'
	  echo "Using VKD3D for d3d12 translation" >> "$_where"/last_build_config.log
	fi

	if [ $_use_dxvk == "true" ]; then
	  echo "Using DXVK winelib for d3d10 and d3d11 translation" >> "$_where"/last_build_config.log
	fi

	echo "" >> "$_where"/last_build_config.log

	# apply compiler choice and optimizations
	if [ $_COMPILEWITH == 'clang' ]; then
	  export CC="clang"
	  export CXX="clang++"
	  echo "Using clang compiler" >> "$_where"/last_build_config.log
	  if [ $_LOCAL_OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g -march=native -pipe -O3"
	    export LDFLAGS="-O3"
	  fi
	elif [ $_COMPILEWITH == 'zapcc' ]; then
	  export CC="zapcc"
	  export CXX="zapcc++"
	  echo "Using zapcc compiler" >> "$_where"/last_build_config.log
	  if [ $_LOCAL_OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g -march=native -pipe -O3"
	    export LDFLAGS="-O3"
	  fi
	elif [ $_COMPILEWITH == 'gcc7' ]; then
	  export CC="gcc-7"
	  export CXX="g++-7"
	  echo "Using gcc7 compiler" >> "$_where"/last_build_config.log
	  if [ $_LOCAL_OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-march=native -pipe -Os"
	    export LDFLAGS="-Os"
	  fi
	else
	  echo "Using gcc compiler" >> "$_where"/last_build_config.log
	  if [ $_LOCAL_OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-march=native -pipe -Os"
	    export LDFLAGS="-Os"
	  fi
	fi

	if [ $_LOCAL_OPTIMIZED == 'true' ]; then
	  export CFLAGS="${COMMON_FLAGS}"
	  export CXXFLAGS="${COMMON_FLAGS}"
	  echo "With predefined optimizations (including -march=native)" >> "$_where"/last_build_config.log
	else
	  echo "Using /etc/makepkg.conf settings for compiler optimization flags" >> "$_where"/last_build_config.log
	fi

	echo "" >> "$_where"/last_build_config.log

	# workaround for FS#55128
	# https://bugs.archlinux.org/task/55128
	# https://bugs.winehq.org/show_bug.cgi?id=43530
	export CFLAGS="${CFLAGS/-fno-plt/}"
	export LDFLAGS="${LDFLAGS/,-z,now/}"

	# use CLOCK_MONOTONIC instead of CLOCK_MONOTONIC_RAW in ntdll/server - lowers overhead
	if [ $_clock_monotonic == "true" ]; then
	  patch -Np1 < ../'use_clock_monotonic.patch' && echo "Applied clock_monotonic patch" >> "$_where"/last_build_config.log
	fi

	# Fixes (partially) systray on plasma 5 - https://bugs.winehq.org/show_bug.cgi?id=38409
	if [ $_plasma_systray_fix == "true" ]; then
	  patch -Np1 < ../'plasma_systray_fix.patch' && echo "Applied plasma 5 systray fix" >> "$_where"/last_build_config.log
	fi

	# Bypass compositor in fullscreen mode - Reduces stuttering and improves performance
	if [ $_FS_bypass_compositor == "true" ]; then
	  patch -Np1 < ../'FS_bypass_compositor.patch' && echo "Applied Fullscreen compositor bypass patch" >> "$_where"/last_build_config.log
	fi

	# Use faudio for xaudio2 - https://github.com/aeikum/wine/commits/faudio-fixups
	if [ $_use_faudio == "true" ] && [ $_use_staging == "true" ]; then
	  patch -Np1 < ../'faudio-exp.patch' && echo "Applied faudio for xaudio2 patch" >> "$_where"/last_build_config.log
	  _faudio="-W xaudio2_7-CreateFX-FXEcho -W xaudio2_7-WMA_support -W xaudio2_CommitChanges -W winepulse-PulseAudio_Support" # Disable xaudio2 & winepulse staging patchsets for faudio
	  _withfaudio='--with-faudio'
	fi

	# Patch to allow Path of Exile to run with DirectX11
	# https://bugs.winehq.org/show_bug.cgi?id=42695
	if [ $_poe_fix == "true" ]; then
	  patch -Np1 < ../'poe-fix.patch' && echo "Applied Path of Exile DX11 fix" >> "$_where"/last_build_config.log
	fi

	# Workaround for F4SE/SkyrimSE Script Extender
	# https://github.com/hdmap/wine-hackery/tree/master/f4se
	if [ $_f4skyrimse_fix == "true" ]; then
	  patch -Np1 < ../'f4skyrimse-fix.patch' && echo "Applied F4/SkyrimSE Script Extender fix" >> "$_where"/last_build_config.log
	fi

	# Fallout 4 dsound workaround
	# https://bugs.winehq.org/show_bug.cgi?id=41271
	if [ $_fallout4dsound_fix == "true" ]; then
	  patch -Np1 < ../'fallout4.patch' && echo "Applied Fallout 4 Dsound workaround" >> "$_where"/last_build_config.log
	fi

	# Magic The Gathering: Arena crash fix
	if [ $_mtga_fix == "true" ]; then
	  patch -Np1 < ../'mtga.patch' && echo "Applied MTGA crashfix" >> "$_where"/last_build_config.log
	fi

	# The Sims 2 fix - disable wined3d-WINED3D_RS_COLORWRITEENABLE and wined3d-Indexed_Vertex_Blending staging patchsets - The actual patch is applied after staging
	if [ $_sims2_fix == "true" ]; then
	  _sims2="-W wined3d-WINED3D_RS_COLORWRITEENABLE -W wined3d-Indexed_Vertex_Blending"
	fi

	# The Sims 3 fix - reverts 6823abd521c0c12d20d9171fb5ae8b300009d082 to fix Sims 3 on older than 415.xx nvidia drivers - https://bugs.winehq.org/show_bug.cgi?id=45361
	if [ $_sims3_fix == "true" ]; then
	  patch -Np1 < ../'sims_3-oldnvidia.patch' && echo "Applied The Sims 3 Debian&co nvidia fix" >> "$_where"/last_build_config.log
	fi

	# Star Citizen workaround for the freezing on splashscreen since 25acfbb40b5316a8c87989d4e61ce9edef2a04aa - https://bugs.winehq.org/show_bug.cgi?id=46099
	if [ $_starcitizen_fix == "true" ]; then
	  patch -Np1 < ../'RtlWaitOnAddress-race.patch' && echo "Applied Star Citizen fix" >> "$_where"/last_build_config.log
	  _starctizen="-W ntdll-futex-condition-var"
	fi

	# steam crossover hack for store/web functionality
	# https://bugs.winehq.org/show_bug.cgi?id=39403
	if [ $_steam_fix == "true" ]; then
	  patch -Np1 < ../'steam.patch' && echo "Applied steam crossover hack" >> "$_where"/last_build_config.log
	fi

	# Disable server-send_hardware_message staging patchset if found - Fixes FFXIV/Warframe/Crysis 3 (...) mouse jittering issues on 3.19 staging and lower.
	if [ $_server_send_hwmsg_disable == "true" ] && [ $_use_staging == "true" ]; then
	  if [ -d "${srcdir}"/"${_stgsrcdir}"/patches/server-send_hardware_message ]; then # ghetto check for server-send_hardware_message staging patchset presence
	    _server_send_disable="-W server-send_hardware_message"
	    echo "server-send_hardware_message staging patchset disabled (mouse jittering fix)" >> "$_where"/last_build_config.log
	  else
	    echo "server-send_hardware_message staging patchset wasn't found, so _server_send_hwmsg_disable setting was ignored" >> "$_where"/last_build_config.log
	  fi
	fi

	# Disable winepulse pulseaudio patchset
	if [ $_staging_pulse_disable == "true" ] && [ $_use_staging == "true" ]; then
	  _winepulse_disable="-W winepulse-PulseAudio_Support"
	  echo "Disabled the staging winepulse patchset" >> "$_where"/last_build_config.log
	fi

	# CSMT toggle patch - Corrects the CSMT toggle to be more logical
	if [ $_CSMT_toggle == "true" ] && [ $_use_staging == "true" ]; then
	  cd "${srcdir}"/"${_stgsrcdir}"
	  patch -Np1 < ../'CSMT-toggle.patch' && echo "Applied CSMT toggle logic patch" >> "$_where"/last_build_config.log
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	# wine-staging user patches
	if [ $_user_patches == "true" ] && [ $_use_staging == "true" ]; then
	  _userpatch_target="wine-staging"
	  _userpatch_ext="mystaging"
	  cd "${srcdir}"/"${_stgsrcdir}"
	  user_patcher
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	if [ $_use_staging == "true" ]; then
	  msg2 'Applying wine-staging patches...'
	  "${srcdir}"/"${_stgsrcdir}"/patches/patchinstall.sh DESTDIR="${srcdir}/${_winesrcdir}" --all $_sims2 $_starctizen $_server_send_disable $_faudio $_winepulse_disable

	  # Remove staging version tag
	  sed -i "s/  (Staging)//g" "${srcdir}"/"${_winesrcdir}"/libs/wine/Makefile.in
	fi

	# esync
	if [ $_use_esync == "true" ]; then
	  if git merge-base --is-ancestor 2600ecd4edfdb71097105c74312f83845305a4f2 HEAD; then # Esync ce79346
	    if [ $_use_staging == "true" ]; then
	      # fixes for esync patches to apply to staging
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      patch -Np1 < ../'esync-staging-fixes-r3.patch' && echo "Using esync staging 3.20+ compat fixes" >> "$_where"/last_build_config.log
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi

	    cd "${srcdir}"/"${_esyncsrcdir}"
	    patch -Np1 < ../'esync-compat-fixes-r3.patch' && echo "Using esync 3.20+ compat fixes" >> "$_where"/last_build_config.log
	    cd "${srcdir}"/"${_winesrcdir}"
	  # if using a wine version that includes aec7bef, use 3.17+ fixes
	  elif git merge-base --is-ancestor aec7befb5115d866724149bbc5576c7259fef820 HEAD; then # server: Avoid potential size overflow for empty object attributes
	    if [ $_use_staging == "true" ]; then
	      # fixes for esync patches to apply to staging
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      patch -Np1 < ../'esync-staging-fixes-r2.patch' && echo "Using esync staging 3.17+ compat fixes" >> "$_where"/last_build_config.log
	      cd "${srcdir}"/"${_winesrcdir}"
	    # if using a wine version that includes c099655, use 3.19+ addon fixes
	    elif git merge-base --is-ancestor c0996553a1d9056e1b89871fc8c3fb0bfb5a4f0c HEAD; then #  server: Support FILE_SKIP_COMPLETION_PORT_ON_SUCCESS on server-side asyncs
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      patch -Np1 < ../'esync-compat-fixes-r2.1.patch' && echo "Using esync 3.19+ compat addon fixes" >> "$_where"/last_build_config.log
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi

	    cd "${srcdir}"/"${_esyncsrcdir}"
	    patch -Np1 < ../'esync-compat-fixes-r2.patch' && echo "Using esync 3.17+ compat fixes" >> "$_where"/last_build_config.log
	    cd "${srcdir}"/"${_winesrcdir}"
	  else
	    # 3.10 - 3.16
	    if [ $_use_staging == "true" ]; then
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      patch -Np1 < ../'esync-staging-fixes-r1.patch' && echo "Using esync staging 3.16- compat fixes" >> "$_where"/last_build_config.log
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi

	    cd "${srcdir}"/"${_esyncsrcdir}"
	    patch -Np1 < ../'esync-compat-fixes-r1.patch' && echo "Using esync 3.16- compat fixes" >> "$_where"/last_build_config.log
	    cd "${srcdir}"/"${_winesrcdir}"

	    # if using a wine version that includes 57212f6, apply 3.14+ additional fixes
	    if git merge-base --is-ancestor 57212f64f8e4fef0c63c633940e13d407c0f2069 HEAD; then # kernel32: Add AttachConsole implementation
	      cd "${srcdir}"/"${_esyncsrcdir}"
	      patch -Np1 < ../'esync-compat-fixes-r1.1.patch' && echo "Using esync 3.14+ additional compat fixes" >> "$_where"/last_build_config.log
	      cd "${srcdir}"/"${_winesrcdir}"
	    fi
	  fi

	  # apply esync patches
	  for _f in "${srcdir}"/"${_esyncsrcdir}"/*.patch; do
	    msg2 "Applying ${_f}"
	    git apply -C1 --verbose < "${_f}"
	  done

	  # Fix for server-Desktop_Refcount and patchsets depending on it (ws2_32-WSACleanup, ws2_32-TransmitFile, server-Pipe_ObjectName)
	  if [ $_use_staging == "true" ]; then
	    msg2 "Applying esync-no_alloc_handle.patch"
	    patch -Np1 < ../'esync-no_alloc_handle.patch'
	  fi
	fi
	# /esync
	
	# Launch with dedicated gpu desktop entry patch
	if [ $_launch_with_dedicated_gpu == "true" ]; then
	  patch -Np1 < ../'launch-with-dedicated-gpu-desktop-entry.patch' && echo "Applied launch with dedicated gpu desktop entry patch" >> "$_where"/last_build_config.log
	fi

	# Low latency alsa audio - https://blog.thepoon.fr/osuLinuxAudioLatency/
	if [ $_lowlatency_audio == "true" ] && [ $_use_staging == "true" ]; then
	  patch -Np1 < ../'lowlatency_audio.patch' && echo "Applied low latency alsa audio patch" >> "$_where"/last_build_config.log
	fi

	# Fortnite Fix - Currently not working anymore
	if [ $_fortnite_fix == "true" ]; then
	  patch -Np1 < ../'fortnite.patch' && echo "Applied Fortnite crashfix" >> "$_where"/last_build_config.log
	fi

	# The Sims 2 fix - https://bugs.winehq.org/show_bug.cgi?id=8051
	if [ $_sims2_fix == "true" ]; then
	  patch -Np1 < ../'sims_2-fix.patch' && echo "Applied The Sims 2 fix" >> "$_where"/last_build_config.log
	fi

	# apply wine-pba patches
	if [ $_use_pba == "true" ]; then
	  rm -rf "${srcdir}/${_pbasrcdir}"
	  mkdir -p "${srcdir}/${_pbasrcdir}/patches"
	  cd "${srcdir}/${_pbasrcdir}"
	  if [ $_pba_version == "321+" ]; then
	    patch -Np1 < ../'PBA321+.patch'
	  elif [ $_pba_version == "320+" ]; then
	    patch -Np1 < ../'PBA320+.patch'
	  elif [ $_pba_version == "319+" ]; then
	    patch -Np1 < ../'PBA319+.patch'
	  elif [ $_pba_version == "318+" ]; then
	    patch -Np1 < ../'PBA318+.patch'
	  elif [ $_pba_version == "317+" ]; then
	    patch -Np1 < ../'PBA317+.patch'
	  elif [ $_pba_version == "314+" ]; then
	    patch -Np1 < ../'PBA314+.patch'
	  elif [ $_pba_version == "313-" ]; then
	    patch -Np1 < ../'PBA313-.patch'
	  fi
	  cd "${srcdir}"/"${_winesrcdir}"
	  for _f in $(ls "${srcdir}"/"${_pbasrcdir}"/'patches'); do
	      patch -Np1 < "${srcdir}"/"${_pbasrcdir}"/'patches'/"${_f}"
	  done
	  echo "Using pba (${_pba_version}) patchset" >> "$_where"/last_build_config.log
	fi

	# d3d9 patches
	if [ $_use_gallium_nine == "true" ] && [ $_use_staging == "true" ]; then
	  wget -O "$_where"/wine-d3d9.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/wine-d3d9.patch
	  wget -O "$_where"/staging-helper.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/staging-helper.patch
	  patch -Np1 < "$_where"/staging-helper.patch
	  patch -Np1 < "$_where"/wine-d3d9.patch
	  autoreconf -f
	  _withd3d9nine='--with-d3d9-nine'
	elif [ $_use_gallium_nine == "true" ] && [ $_use_staging == "false" ]; then
	  wget -O "$_where"/wine-d3d9.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/wine-d3d9.patch
	  wget -O "$_where"/d3d9-helper.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/d3d9-helper.patch
	  patch -Np1 < "$_where"/d3d9-helper.patch
	  patch -Np1 < "$_where"/wine-d3d9.patch
	  autoreconf -f
	  _withd3d9nine='--with-d3d9-nine'
	fi

        # GLSL toggle patch - Allows for use of ARB instead of GLSL
        if [ $_GLSL_toggle == "true" ] && [ $_use_staging == "true" ] && [ $_use_gallium_nine == "false" ]; then
          patch -Np1 < ../'GLSL-toggle.patch' && echo "Applied GLSL toggle patch" >> "$_where"/last_build_config.log
        fi

	# Proton Fullscreen patch - Allows resolution changes for fullscreen games without changing desktop resolution
	if [ $_proton_fs_hack == "true" ] && [ $_use_staging == "true" ] && [ $_FS_bypass_compositor == "true" ]; then
	  patch -Np1 < ../'valve_proton_fullscreen_hack-staging.patch' && echo "Applied Proton fullscreen hack patch" >> "$_where"/last_build_config.log
	elif [ $_proton_fs_hack == "true" ] && [ $_use_staging == "true" ] && [ $_FS_bypass_compositor == "false" ]; then # Force-enable FS_bypass_compositor patch if disabled as it's a dependency Proton Fullscreen patch
	  patch -Np1 < ../'FS_bypass_compositor.patch' && echo "Applied Fullscreen compositor bypass patch (force enabled because Proton fullscreen hack is enabled and needs it)" >> "$_where"/last_build_config.log
	  patch -Np1 < ../'valve_proton_fullscreen_hack-staging.patch' && echo "Applied Proton fullscreen hack patch" >> "$_where"/last_build_config.log
	fi

	# IMAGE_FILE_LARGE_ADDRESS_AWARE override - Enable with WINE_LARGE_ADDRESS_AWARE=1
	if [ $_large_address_aware == "true" ] && [ $_use_staging == "false" ]; then
	  patch -Np1 < ../'large_address_aware.patch' && echo "Applied large address aware override support" >> "$_where"/last_build_config.log
	elif [ $_large_address_aware == "true" ] && [ $_use_staging == "true" ]; then
	  patch -Np1 < ../'large_address_aware-staging.patch' && echo "Applied large address aware override support" >> "$_where"/last_build_config.log
	fi

	# wine user patches
	if [ $_user_patches == "true" ]; then
	  _userpatch_target="plain-wine"
	  _userpatch_ext="my"
	  user_patcher
	fi

	# Set custom version tags
	if [ $_use_staging == "true" ]; then
	  __stg=" Staging"
	else
	  __stg=" Plain"
	fi
	if [ $_use_esync == "true" ]; then
	  __zf=" Esync"
	fi
	if [ $_use_pba == "true" ]; then
	  __acomminos=" PBA"
	fi
	if [ $_use_gallium_nine == "true" ]; then
	  __nine=" Nine"
	fi
	if [ $_use_vkd3d == "true" ]; then
	  __vkd3d=" Vkd3d"
	fi
	if [ $_use_dxvk == "true" ]; then
	  __doitsujin=" Dxvk"
	fi
	sed -i "s/\\\1/\\\1  (${__stg}${__zf}${__acomminos}${__nine}${__vkd3d}${__doitsujin} )/g" "${srcdir}"/"${_winesrcdir}"/libs/wine/Makefile.in

	# dxvk user patches
	if [ $_user_patches == "true" ] && [ $_use_dxvk == "true" ]; then
	  _userpatch_target="dxvk"
	  _userpatch_ext="mydxvk"
	  cd "${srcdir}"/"${_dxvksrcdir}"
	  user_patcher
	  cd "${srcdir}"/"${_winesrcdir}"
	fi

	# fix path of opencl headers
	sed 's|OpenCL/opencl.h|CL/opencl.h|g' -i configure*

	# delete old build dirs (from previous builds)
	rm	-rf "${srcdir}"/wine-tkg-*-{32,64}-build

	# no compilation
	if [ $_NOCOMPILE == "true" ]; then
	  msg2 'make prepare function fail by using Gandalf'
	  YOU_SHALL_NOT_PASS
	fi

	# create new build dirs
	mkdir -p "${srcdir}"/"${pkgname}"-64-build
	mkdir -p "${srcdir}"/"${pkgname}"-32-build

	cd "$_where" # this is needed on version update not to get lost in srcdir
}

build() {

	cd "${srcdir}"

	local _prefix=/usr

	# External install
	if [[ $_EXTERNAL_INSTALL == "true" ]]; then
	  if [[ $_EXTERNAL_INSTALL_TYPE == "lutris" ]]; then
	    _DEFAULT_EXTERNAL_PATH=$_LUTRIS_RUNNERS_PATH
	  fi
	  _prefix="$_DEFAULT_EXTERNAL_PATH/$pkgname-$pkgver"
	fi

	# build wine 64-bit
	# (according to the wine wiki, this 64-bit/32-bit building order is mandatory)
	msg2 'Building Wine-64...'
	cd  "${srcdir}"/"${pkgname}"-64-build
	../${_winesrcdir}/configure \
		--prefix="$_prefix" \
		--libdir="$_prefix/lib" \
		--with-x \
		--with-gstreamer \
		--enable-win64 \
		--with-xattr \
		$_withd3d9nine \
		$_withvkd3d \
		$_withfaudio \
		#--disable-tests
		# Gstreamer was disabled for FS#33655

	if [ $_LOCAL_OPTIMIZED == 'true' ]; then
	  # make using all available threads
	  schedtool -B -n 1 -e ionice -n 1 make -j$(nproc)
	else
	  # make using makepkg settings
	  schedtool -B -n 1 -e ionice -n 1 make
	fi


	# build wine 32-bit
	export PKG_CONFIG_PATH='/usr/lib32/pkgconfig'
	msg2 'Building Wine-32...'
	cd "${srcdir}/${pkgname}"-32-build
	../${_winesrcdir}/configure \
		--prefix="$_prefix" \
		--libdir="$_prefix/lib32" \
		--with-x \
		--with-gstreamer \
		--with-xattr \
		$_withd3d9nine \
		$_withvkd3d \
		$_withfaudio \
		--with-wine64="${srcdir}/${pkgname}"-64-build \
		#--disable-tests

	if [ $_LOCAL_OPTIMIZED == 'true' ]; then
	  # make using all available threads
	  schedtool -B -n 1 -e ionice -n 1 make -j$(nproc)
	else
	  # make using makepkg settings
	  schedtool -B -n 1 -e ionice -n 1 make
	fi

	# Build DXVK winelib
	if [ $_use_dxvk == "true" ]; then
	  cd "${srcdir}"/"${_dxvksrcdir}"
	  mkdir build
	  patch -Np1 < ../'dxvk-winelib.patch'
	  ./package-release-wine.sh master build --no-package
	fi
}

package() {

	local _prefix=/usr

	# External install
	if [[ $_EXTERNAL_INSTALL == "true" ]]; then
	  if [[ $_EXTERNAL_INSTALL_TYPE == "lutris" ]]; then
	    _DEFAULT_EXTERNAL_PATH=$_LUTRIS_RUNNERS_PATH
	  fi
	  _prefix="$_DEFAULT_EXTERNAL_PATH/$pkgname-$pkgver"
	fi

	# package wine 32-bit
	# (according to the wine wiki, this reverse 32-bit/64-bit packaging order is important)
	msg2 'Packaging Wine-32...'
	cd "${srcdir}/${pkgname}"-32-build
	make 	prefix="${pkgdir}$_prefix" \
			libdir="${pkgdir}$_prefix/lib32" \
			dlldir="${pkgdir}$_prefix/lib32/wine" install

	# package wine 64-bit
	msg2 'Packaging Wine-64...'
	cd "${srcdir}/${pkgname}"-64-build
	make 	prefix="${pkgdir}$_prefix" \
			libdir="${pkgdir}$_prefix/lib" \
			dlldir="${pkgdir}$_prefix/lib/wine" install

	# freetype font smoothing for win32 applications
	install -d "$pkgdir"/etc/fonts/conf.{avail,d}
	install -m644 "${srcdir}/30-win32-aliases.conf" "${pkgdir}/etc/fonts/conf.avail/30-$pkgname-win32-aliases.conf"
	ln -s "../conf.avail/30-$pkgname-win32-aliases.conf" "${pkgdir}/etc/fonts/conf.d/30-$pkgname-win32-aliases.conf"

	# wine binfmt
	if [[ $_EXTERNAL_INSTALL == true ]]; then
	  mkdir -p "${pkgdir}/usr/lib/binfmt.d"
	  # change binfmt.conf to actual installed path
	  sed -e "s|/usr/bin/wine|$_prefix/bin/wine|g" < "${srcdir}/wine-binfmt.conf" > "${pkgdir}/usr/lib/binfmt.d/$pkgname.conf"
	else
	  install -Dm 644 "${srcdir}/wine-binfmt.conf" "${pkgdir}/usr/lib/binfmt.d/wine.conf"
	fi

	# dxvk
	if [ $_use_dxvk == "true" ]; then
	  cp -rv "${srcdir}"/"${_dxvksrcdir}"/build/dxvk-master/x32/* "${pkgdir}$_prefix"/lib32/wine
	  cp -rv "${srcdir}"/"${_dxvksrcdir}"/build/dxvk-master/x64/* "${pkgdir}$_prefix"/lib/wine
	fi

	if [ $_use_esync == "true" ]; then
	  msg2 '##########################################################################################################################'
	  msg2 ''
	  msg2 'Remember to export WINEESYNC=1 and increase file descriptors limits in /etc/security/limits.conf to use ESYNC goodness ;)'
	  msg2 ''
	  msg2 'https://raw.githubusercontent.com/zfigura/wine/esync/README.esync'
	  msg2 ''
	  msg2 '##########################################################################################################################'
	fi

	# External install
	if [[ $_EXTERNAL_INSTALL == "true" ]]; then
	  msg2 "### This wine will be installed to: $_prefix"
	fi
	if [[ $_EXTERNAL_INSTALL_TYPE != "lutris" ]]; then
	  msg2 "### Remember to use $_prefix/bin/wine instead of just wine (same for winecfg etc.)"
	fi
}
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'a49bc2bb374d5ea5045ada5401cd91a3'
         'ecada2fc8abda49c6bb788c25f05a822'
         'd1a18945f2ca46fa3fce70e157393a01'
         'f50501943759c8731d40eb521e36e6da'
         '85c8f0db6895ad7c2868afd367439b4d'
         '6e301f262f004b930ffc3000839d837b'
         '342a6e02f73c06120ce01cc887489d9c'
         '78cc875f33c8aeefb000f5063323768b'
         'dd993e03188c86631e6c2cbdf14113aa'
         'b997bf4bae2d08f7e84870c8c91fb08b'
         '374ffc1d29488dd3fdac7d01f55964d4'
         '3a263a0f6211287af53ea7db79b1f34f'
         '4e1b9cc09a01749c07230c7241526371'
         'c4b104892b0501781789aadc5a95b261'
         'e32c770f6aa964e6093fe734c7dd6c0a'
         'd86e0feaeb690efe521ac3cc852fac12'
         '46f612602ee7698b840a4e757194cfa7'
         '9fc474e08b6e312333aac6bea9319dd6'
         'b76d64af20e1026f0303cc8cb5835815'
         '5a1e50fb432d1bbc6cf3db8cdb4cdc0c'
         '154c16552e72cd89ed2d0d7765d0382f'
         'c2c22aca8d2635248ad0788d263c4104'
         '29a805db7827b5d89d3db44645b81ff9'
         'ef381d8b9a65260c0be8f0858a17e131'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '1ff4e467f59409272088d92173a0f801'
         '517a67b31d26990e6704074ccb630f80'
         'ed6060dc030ebd5865f1fcc40d8863be'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         '65d47ea14d7c666d6308fc65a5ccd729'
         '3aafb27f35d4817942085d87904dcfc8'
         '927f39348cd29ce9876871e4edb15a09'
         'd328bfd0d363434fe5f83f3a614849f7'
         '5ca4ee142eafe2c8873d59b2feb51a7d'
         '1687534ebe656942a19914bfd87edf07'
         'f9797a9b65087b37022d9e92e49b6080'
         '3cb83a83c7ed9335eddbef665f4d89f9'
         '25e20e66ee3b2896f2979ba4e16ff767')

function exit_cleanup {
  rm -fv "$_where"/BIG_UGLY_COINMINER # state tracker end

if [ $_NUKR == "true" ]; then
  # Sanitization
  rm -rf "$srcdir"/$_pbasrcdir
  rm -rf "$srcdir"/$_esyncsrcdir
  rm -rf "$srcdir"/*.patch
  rm -rf "$srcdir"/*.tgz
  rm -rf "$srcdir"/*.conf
  msg2 'exit cleanup done'
fi

  # Remove temporarily copied patches
  rm -rf "$_where"/*.patch
  rm -rf "$_where"/*.conf
}

trap exit_cleanup EXIT
