pkgname=wine-staging-esync-pba-tkg-git
pkgver=3.13.r0.g25cc380b8e
pkgrel=11
_winesrcdir='wine-git'
_stgsrcdir='wine-staging-git'
_pbasrcdir='wine-pba'
_esyncsrcdir='esync'
where=$PWD # track basedir as different Arch based distros are moving srcdir around
pkgdesc='Wine-staging-git (minus 4 patches) with added esync and PBA patches (also includes Path of Exile DX11 patch and others).'
url='https://github.com/zfigura/wine/tree/esync'
arch=('x86_64')
options=('staticlibs' 'ccache')
license=('LGPL')
depends=(
    'attr'                  'lib32-attr'
    'fontconfig'            'lib32-fontconfig'
    'lcms2'                 'lib32-lcms2'
    'libxml2'               'lib32-libxml2'
    'libxcursor'            'lib32-libxcursor'
    'libxrandr'             'lib32-libxrandr'
    'libxdamage'            'lib32-libxdamage'
    'libxi'                 'lib32-libxi'
    'gettext'               'lib32-gettext'
    'freetype2'             'lib32-freetype2'
    'glu'                   'lib32-glu'
    'libsm'                 'lib32-libsm'
    'gcc-libs'              'lib32-gcc-libs'
    'libpcap'               'lib32-libpcap'
    'desktop-file-utils'
)
makedepends=('git' 'autoconf' 'ncurses' 'bison' 'perl' 'fontforge' 'flex'
    'gcc>=4.5.0-2'
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'gnutls'                'lib32-gnutls'
    'libxinerama'           'lib32-libxinerama'
    'libxcomposite'         'lib32-libxcomposite'
    'libxmu'                'lib32-libxmu'
    'libxxf86vm'            'lib32-libxxf86vm'
    'libldap'               'lib32-libldap'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'alsa-lib'              'lib32-alsa-lib'
    'libxcomposite'         'lib32-libxcomposite'
    'mesa'                  'lib32-mesa'
    'libgl'                 'lib32-libgl'
    'libxslt'               'lib32-libxslt'
    'libpulse'              'lib32-libpulse'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'samba'                 'schedtool'
)
optdepends=(
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'libldap'               'lib32-libldap'
    'gnutls'                'lib32-gnutls'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'libpulse'              'lib32-libpulse'
    'alsa-plugins'          'lib32-alsa-plugins'
    'alsa-lib'              'lib32-alsa-lib'
    'libjpeg-turbo'         'lib32-libjpeg-turbo'
    'libxcomposite'         'lib32-libxcomposite'
    'libxinerama'           'lib32-libxinerama'
    'ncurses'               'lib32-ncurses'
    'libxslt'               'lib32-libxslt'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'cups'                  'zapcc'
    'samba'                 'clang'
    'dosbox'
)
source=("$_winesrcdir"::'git://source.winehq.org/git/wine.git'
		"$_stgsrcdir"::'git+https://github.com/wine-staging/wine-staging.git'
		"$_pbasrcdir"::'git+https://github.com/Firerat/wine-pba.git#branch=knobs_and_switches'
		'https://github.com/zfigura/wine/releases/download/esync02f7a52/esync.tgz'
		'steam.patch'
		'poe-fix.patch'
		'f4skyrimse-fix.patch'
		'harmony-fix.diff'
		'30-win32-aliases.conf'
		'wine-binfmt.conf'
#		'vulkan-enable-extensions.patch'
		'CSMT-toggle.patch'
		'esync-staging-fixes.patch'
		'cv_futex.diff'
		'fortnite.patch'
		'fallout4.patch')

provides=(
	"wine=$pkgver"
	"wine-wow64=$pkgver"
	"wine-staging=$pkgver"
	"wine-esync=$pkgver"
)

conflicts=('wine' 'wine-wow64' 'wine-staging' 'wine-esync')
makedepends=(${makedepends[@]} ${depends[@]})
install=wine.install

pkgver() {
	# retrieve current wine-staging version
	cd "${srcdir}/${_stgsrcdir}"
	local _stagingTag="$(git tag --sort='version:refname' | tail -n1 | sed 's/-/./g;s/^v//;s/\.rc/rc/')"
	local _stagingVer="$(git describe --long --tags \
								| sed 's/\([^-]*-g\)/r\1/;s/-/./g;s/^v//;s/\.rc/rc/' \
								| sed "s/^latest.release/${_stagingTag}/")"

	# retrieve current wine version
	cd "${srcdir}/${_winesrcdir}"
	local _wineVer="$(git describe --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-/./g;s/^v//;s/\.rc/rc/')"

	# retrieve current wine-pba version
	cd "${srcdir}/${_pbasrcdir}"
	local _pbaTag="$(git tag --sort='version:refname' | tail -n1 | sed 's/-/./g;s/^v//;s/\.rc/rc/')"
	local _pbaVer=$( printf "%s.r%s.%s" "$_pbaTag" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)" )

	# version string
	printf '%s' "${_wineVer#wine.}"
}

prepare() {
	cd "${srcdir}"/"${_winesrcdir}"
	
	# restore the wine tree to its git origin state, without wine-staging patches
	# (necessary for reapplying wine-staging patches in succedent builds,
	# otherwise the patches will fail to be reapplied)
	msg2 'Cleaning wine source code tree...'
	git reset --hard HEAD 	# restore tracked files
	git clean -xdf 			# delete untracked files

	# change back to the wine upstream commit that this version of wine-staging is based in
	msg2 'Changing wine HEAD to the wine-staging base commit...'
	git checkout "$(../"$_stgsrcdir"/patches/patchinstall.sh --upstream-commit)"

	# compiler selector
	read -p "What compiler do you want to use?`echo $'\n> 1.gcc\n  2.clang\n  3.zapcc\nchoice[1-3?]: '`" CONDITION;
	if [ "$CONDITION" == "2" ]; then
	  COMPILEWITH='clang'
	elif [ "$CONDITION" == "3" ]; then
	  COMPILEWITH='zapcc'
	else
	  COMPILEWITH='gcc'
	fi

	# optimizations prompt
	read -p "Do you want to build optimized binaries? If you're planning to share the resulting package, say no (as -march=native will be used)`echo $'\n> Y/n : '`" CONDITION;
	if [ "$CONDITION" == "n" ]; then
	  OPTIMIZED='false'
	else
	  OPTIMIZED='true'
	fi

	# apply compiler choice and optimizations
	if [ $COMPILEWITH == 'clang' ]; then
	  export CC="clang"
	  export CXX="clang++"
	  if [ $OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g -march=native -pipe -O3"
	    export LDFLAGS="-O3"
      fi
	elif [ $COMPILEWITH == 'zapcc' ]; then
	  export CC="zapcc"
	  export CXX="zapcc++"
      if [ $OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-std=gnu89 -g -march=native -pipe -O3"
	    export LDFLAGS="-O3"
	  fi
	else
	  if [ $OPTIMIZED == 'true' ]; then
	    export COMMON_FLAGS="-march=native -pipe -O2"
	    export LDFLAGS="-O2"
	  fi
	fi

	if [ $OPTIMIZED == 'true' ]; then
	  export CFLAGS="${COMMON_FLAGS}"
	  export CXXFLAGS="${COMMON_FLAGS}"
	fi

	# workaround for FS#55128
	# https://bugs.archlinux.org/task/55128
	# https://bugs.winehq.org/show_bug.cgi?id=43530
	export CFLAGS="${CFLAGS/-fno-plt/}"
	export LDFLAGS="${LDFLAGS/,-z,now/}"

	# patch for 32bit font smoothing
	patch -Np1 < ../'harmony-fix.diff'

	# Patch to allow Path of Exile to run with DirectX11
	# https://bugs.winehq.org/show_bug.cgi?id=42695
	patch -Np1 < ../'poe-fix.patch'

	# Workaround for F4SE/SkyrimSE Script Extender
	# https://github.com/hdmap/wine-hackery/tree/master/f4se
	read -p "Do you want to install the Fallout 4/Skyrim SE Script Extender patch? - note: Can break stuff`echo $'\n> N/y : '`" CONDITION;
	if [ "$CONDITION" == "y" ]; then
	  patch -Np1 < ../'f4skyrimse-fix.patch'
	fi

	# Fallout 4 dsound workaround
	# https://bugs.winehq.org/show_bug.cgi?id=41271
	read -p "Do you want to install the Fallout 4 Dsound workaround? - note: Hack. Could break stuff`echo $'\n> N/y : '`" CONDITION;
	if [ "$CONDITION" == "y" ]; then
	  patch -Np1 < ../'fallout4.patch'
	fi

	# FFXIV mouse jitter fix
	read -p "Do you want to use the FFXIV mouse jitter fix? - note: Disables server-send_hardware_message staging patchset`echo $'\n> N/y : '`" CONDITION;
	if [ "$CONDITION" == "y" ]; then
	  ffxiv_mouse_fix="-W server-send_hardware_message"
	fi

	# steam crossover hack for store/web functionality
	# https://bugs.winehq.org/show_bug.cgi?id=39403
	patch -Np1 < ../'steam.patch'

	# Add the futex-based condition variable implementation from Zebediah Figura - soon to be mainlined
	patch -Np1 < ../'cv_futex.diff'

	# user patches
	if [[ $(find $where -name "*.mypatch") ]]; then
	  read -p "At least one of your own patches were found (*.mypatch). Do you want to install it/them? - Be careful with that ;)`echo $'\n> N/y : '`" CONDITION;
	  if [ "$CONDITION" == "y" ]; then
	    for F in $where/*.mypatch; do
	    if [ -e "${F}" ]; then
	      msg2 "######################################################"
	      msg2 ""
	      msg2 "Applying your own patch ${F}"
	      msg2 ""
	      msg2 "######################################################"
	      patch -Np1 < ${F}
	    fi
	    done
	  fi
	fi

	# CSMT toggle patch - Corrects the CSMT toggle to be more logical
	cd "${srcdir}"/"${_stgsrcdir}"
	patch -Np1 < ../'CSMT-toggle.patch'

	cd "${srcdir}"/"${_winesrcdir}"

	# wine-staging patches and exclusions for esync

	# msvfw32-ICGetDisplayFormat # esync already has its own implementation so it needs to be disabled
	# server-Desktop_Refcount # Breaks esync
	# ws2_32-WSACleanup # Depends on server-Desktop_Refcount
	# ws2_32-TransmitFile # Depends on server-Desktop_Refcount
	# server-Pipe_ObjectName # Depends on server-Desktop_Refcount

	PATCHDEBUG="0" # FOR DEBUGGING - Set to 1 to switch backend to git-apply with 1 line context and rejects - Will enable ALL staging patches except msvfw32-ICGetDisplayFormat, breaking esync in the process

	if [ $PATCHDEBUG == "1" ]; then
	  esync_staging_debug="--backend=git-apply"
	else
	  esync_exclusions="-W server-Desktop_Refcount -W ws2_32-WSACleanup -W ws2_32-TransmitFile -W server-Pipe_ObjectName"
	fi

	msg2 'Applying wine-staging patches...'
	"${srcdir}"/"${_stgsrcdir}"/patches/patchinstall.sh DESTDIR="${srcdir}/${_winesrcdir}" $esync_staging_debug --all -W msvfw32-ICGetDisplayFormat $esync_exclusions $ffxiv_mouse_fix

	# apply wine-pba patches
	for _f in $(ls "${srcdir}"/"${_pbasrcdir}"/'patches'); do
	  patch -Np1 < "${srcdir}"/"${_pbasrcdir}"/'patches'/${_f}
	done

	cd "${srcdir}"/"${_esyncsrcdir}"
	# fixes for esync patches to apply to staging
	patch -Np1 < ../'esync-staging-fixes.patch'
	cd "${srcdir}"/"${_winesrcdir}"

    # wine-esync patches
	for _f in $(ls "${srcdir}"/"${_esyncsrcdir}"); do
	  patch -Np1 < "${srcdir}"/"${_esyncsrcdir}"/${_f}
	done

	patch -Np1 < ../'fortnite.patch'

	# d3d9 patches
	read -p "Do you want to install d3d9 (gallium nine) patches?`echo $'\n> N/y : '`" CONDITION;
	if [ "$CONDITION" == "y" ]; then
	  wget -O $where/wine-d3d9.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/wine-d3d9.patch
	  wget -O $where/staging-helper.patch https://raw.githubusercontent.com/sarnex/wine-d3d9-patches/master/staging-helper.patch
	  patch -Np1 < $where/staging-helper.patch
	  patch -Np1 < $where/wine-d3d9.patch
	  autoreconf -f
	  withd3d9nine='--with-d3d9-nine'
	fi



	# fix path of opencl headers
	sed 's|OpenCL/opencl.h|CL/opencl.h|g' -i configure*

	# delete old build dirs (from previous builds) and make new ones
	rm	-rf "${srcdir}"/"${pkgname}"-{32,64}-build
	mkdir -p "${srcdir}"/"${pkgname}"-64-build
	mkdir -p  "${srcdir}"/"${pkgname}"-32-build

}

build() {
	cd "${srcdir}"

	# build wine-staging 64-bit
	# (according to the wine wiki, this 64-bit/32-bit building order is mandatory)
	msg2 'Building Wine-64...'
	cd  "${srcdir}"/"${pkgname}"-64-build
	../${_winesrcdir}/configure \
		--prefix='/usr' \
		--libdir='/usr/lib' \
		--with-x \
		--with-gstreamer \
		--enable-win64 \
		--with-xattr \
		$withd3d9nine \
		#--disable-tests
		# Gstreamer was disabled for FS#33655

    # make using all available threads
	schedtool -B -n 1 -e ionice -n 1 make -j `cat /proc/cpuinfo | grep "^processor" | wc -l` "$@"

	# build wine-staging 32-bit
	export PKG_CONFIG_PATH='/usr/lib32/pkgconfig'
	msg2 'Building Wine-32...'
	cd "${srcdir}/${pkgname}"-32-build
	../${_winesrcdir}/configure \
		--prefix='/usr' \
		--libdir='/usr/lib32' \
		--with-x \
		--with-gstreamer \
		--with-xattr \
		$withd3d9nine \
		--with-wine64="${srcdir}/${pkgname}"-64-build \
		#--disable-tests 

    # make using all available threads
	schedtool -B -n 1 -e ionice -n 1 make -j `cat /proc/cpuinfo | grep "^processor" | wc -l` "$@"
}

package() {
	
	# package wine-staging 32-bit
	# (according to the wine wiki, this reverse 32-bit/64-bit packaging order is important)
	msg2 'Packaging Wine-32...'
	cd "${srcdir}/${pkgname}"-32-build
	make 	prefix="${pkgdir}/usr" \
			libdir="${pkgdir}/usr/lib32" \
			dlldir="${pkgdir}/usr/lib32/wine" install
	
	# package wine-staging 64-bit
	msg2 'Packaging Wine-64...'
	cd "${srcdir}/${pkgname}"-64-build
	make 	prefix="${pkgdir}/usr" \
			libdir="${pkgdir}/usr/lib" \
			dlldir="${pkgdir}/usr/lib/wine" install
	
	# freetype font smoothing for win32 applications
	install -d "$pkgdir"/etc/fonts/conf.{avail,d}
	install -m644 "${srcdir}/30-win32-aliases.conf" "${pkgdir}/etc/fonts/conf.avail"
	ln -s ../conf.avail/30-win32-aliases.conf "${pkgdir}/etc/fonts/conf.d/30-win32-aliases.conf"

	# wine binfmt
	install -Dm 644 "${srcdir}/wine-binfmt.conf" "${pkgdir}/usr/lib/binfmt.d/wine.conf"
	
	msg2 '##########################################################################################################################'
	msg2 ''
	msg2 'Remember to export WINEESYNC=1 to use ESYNC goodness, and increase file descriptors limits in /etc/security/limits.conf ;)'
	msg2 ''
	msg2 '##########################################################################################################################'
}
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         '5adb3a1eeadfd23e63592749a99ac4b8'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '108d1a6f71bde6431bece05e98ea31db'
         'ecada2fc8abda49c6bb788c25f05a822'
         '608cbfa520e154687dcd62cbdb6db82b'
         '1ff4e467f59409272088d92173a0f801'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         'da9dc5a4eb68d0c1ecb845092a47e612'
         '00e525e9f69e78bc80f5bcac057a3672'
         '7416ca33d6d86e3eab3f4faff105f850')
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         '5adb3a1eeadfd23e63592749a99ac4b8'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '108d1a6f71bde6431bece05e98ea31db'
         'ecada2fc8abda49c6bb788c25f05a822'
         '608cbfa520e154687dcd62cbdb6db82b'
         '1ff4e467f59409272088d92173a0f801'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         'da9dc5a4eb68d0c1ecb845092a47e612'
         '00e525e9f69e78bc80f5bcac057a3672'
         '4eb157f08a8580211a2aafab4267cd23'
         '7416ca33d6d86e3eab3f4faff105f850')
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         '5adb3a1eeadfd23e63592749a99ac4b8'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '108d1a6f71bde6431bece05e98ea31db'
         'ecada2fc8abda49c6bb788c25f05a822'
         '608cbfa520e154687dcd62cbdb6db82b'
         '1ff4e467f59409272088d92173a0f801'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         'da9dc5a4eb68d0c1ecb845092a47e612'
         '00e525e9f69e78bc80f5bcac057a3672'
         '7f58e0c3b8c7594e7edd4ddce4cdaed0'
         '7416ca33d6d86e3eab3f4faff105f850')
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         '5adb3a1eeadfd23e63592749a99ac4b8'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '108d1a6f71bde6431bece05e98ea31db'
         'ecada2fc8abda49c6bb788c25f05a822'
         '608cbfa520e154687dcd62cbdb6db82b'
         '1ff4e467f59409272088d92173a0f801'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         'da9dc5a4eb68d0c1ecb845092a47e612'
         '00e525e9f69e78bc80f5bcac057a3672'
         '736250097f4a921cc14d5181c52dbe50'
         '7416ca33d6d86e3eab3f4faff105f850')
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         '5adb3a1eeadfd23e63592749a99ac4b8'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '108d1a6f71bde6431bece05e98ea31db'
         'ecada2fc8abda49c6bb788c25f05a822'
         '608cbfa520e154687dcd62cbdb6db82b'
         '1ff4e467f59409272088d92173a0f801'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         'da9dc5a4eb68d0c1ecb845092a47e612'
         '00e525e9f69e78bc80f5bcac057a3672'
         '736250097f4a921cc14d5181c52dbe50'
         '7416ca33d6d86e3eab3f4faff105f850')
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         '5adb3a1eeadfd23e63592749a99ac4b8'
         'f58a4e17b33bd96ce0d6e8325cad7f76'
         '108d1a6f71bde6431bece05e98ea31db'
         'ecada2fc8abda49c6bb788c25f05a822'
         '608cbfa520e154687dcd62cbdb6db82b'
         '1ff4e467f59409272088d92173a0f801'
         'cff441678d798466a13a0d03b01e23d7'
         '830a78ea35e124536cdbc8291102ffaa'
         'da9dc5a4eb68d0c1ecb845092a47e612'
         '00e525e9f69e78bc80f5bcac057a3672'
         '736250097f4a921cc14d5181c52dbe50'
         '7416ca33d6d86e3eab3f4faff105f850')
