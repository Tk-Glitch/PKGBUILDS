# Created by: Tk-Glitch <ti3nou at gmail dot com>
# Originally based on https://aur.archlinux.org/packages/nvidia-beta-all/

# Includes DKMS support, libglvnd compat, 32-bit libs and building for all kernels currently installed

# If you want to ignore some packages, set them to "false". Default is all set to "true" for a complete installation.
_lib32="true"
_opencl="true"
_eglwayland="true"

# Auto-add kernel userpatches to source
_autoaddpatch="false"

# Some people seem to believe making blank headers is a good idea
if [ $(pacman -Qs linux-headers | head -c1 | wc -c) -eq 0 ]; then
  error "A (correctly made?) linux-headers package can't be found."
  plain "If you're sure it's installed, blame your kernel maintainer."
  read -p "    Press enter to proceed anyway..."
fi

# Package type selector
if [ ! -e options ]; then
  read -p "What driver version do you want?`echo $'\n> 1.418.52.05 (vulkan dev)\n  2.415.27 (short lived)\n  3.430.14 (long lived)\n  4.430.09 (beta)\n  5.Custom version (396.45 to 418.xx series)\nchoice[1-5?]: '`" CONDITION;
    if [ "$CONDITION" == "2" ]; then
      echo '_driver_version=415.27' > options
      echo '_md5sum=f4777691c4673c808d82e37695367f6d' >> options
      echo '_driver_branch=regular' >> options
    elif [ "$CONDITION" == "3" ]; then
      echo '_driver_version=430.14' > options
      echo '_md5sum=7c0ac1a2e608d4fb79d2f29f1073897f' >> options
      echo '_driver_branch=regular' >> options
    elif [ "$CONDITION" == "4" ]; then
      echo '_driver_version=430.09' > options
      echo '_md5sum=db4dc51501e22ef7aac60ccbe5814226' >> options
      echo '_driver_branch=regular' >> options
    elif [ "$CONDITION" == "5" ]; then
      echo '_driver_version=custom' > options
      read -p "What branch do you want?`echo $'\n> 1.Stable or regular beta\n  2.Vulkan dev\nchoice[1-2?]: '`" CONDITION;
      if [ "$CONDITION" == "2" ]; then
        echo '_driver_branch=vulkandev' >> options
        read -p "Type the desired version number (examples: 415.18.02, 396.54.09): " _driver_version;
      else
        echo '_driver_branch=regular' >> options
        read -p "Type the desired version number (examples: 410.57, 396.51): " _driver_version;
      fi
      echo "_md5sum='SKIP'" >> options
      echo "_driver_version=$_driver_version" >> options
    else
      echo '_driver_version=418.52.05' > options
      echo '_md5sum=6aa905a1a13d5e70246c6d64504518e5' >> options
      echo '_driver_branch=vulkandev' >> options
    fi
# Package type selector
  read -p "Build the dkms package or the regular one?`echo $'\n> 1.dkms\n  2.regular\nchoice[1-2?]: '`" CONDITION;
    if [ "$CONDITION" == "2" ]; then
      echo '_dkms="false"' >> options
    else
      echo '_dkms="true"' >> options
    fi
fi

source options

# packages
if [ "$_dkms" == "true" ]; then
  _nv_base='nvidia-dkms-tkg'
else
  _nv_base='nvidia-tkg'
fi

_nv_utils='nvidia-utils-tkg'
if [ "$_lib32" == "true" ]; then
  _lib32_nv_utils='lib32-nvidia-utils-tkg'
fi

if [ "$_opencl" == "true" ]; then
  _nv_opencl='opencl-nvidia-tkg'
  if [ "$_lib32" == "true" ]; then
    _lib32_nv_opencl='lib32-opencl-nvidia-tkg'
  fi
fi

if [ "$_eglwayland" == "true" ]; then
  _nv_eglwayland='nvidia-egl-wayland-tkg'
fi

pkgname=(${_nv_base} ${_nv_utils} ${_nv_eglwayland} ${_nv_opencl} ${_lib32_nv_utils} ${_lib32_nv_opencl})

where=$PWD # track basedir as different Arch based distros are moving srcdir around
pkgver=$_driver_version
pkgrel=45
arch=('x86_64')
url="http://www.nvidia.com/"
license=('custom:NVIDIA')
optdepends=('linux-headers' 'linux-lts-headers: Build the module for LTS Arch kernel')
options=('!strip')

cp "$where"/patches/* "$where" && cp "$where"/system/* "$where"

# Installer name
_pkg="NVIDIA-Linux-x86_64-$pkgver"

# Source
if [ "$_driver_branch" == "vulkandev" ]; then
  if [[ $pkgver == 396* ]]; then
    _source_name="NVIDIA-Linux-x86_64-$pkgver.run::https://developer.nvidia.com/linux-${pkgver//.}"
  elif [[ $pkgver == 41* ]]; then
    _source_name="NVIDIA-Linux-x86_64-$pkgver.run::https://developer.nvidia.com/vulkan-beta-${pkgver//.}-linux"
  else
    msg2 'Gandalf refuses to get the driver version you asked for.'
    YOU_SHALL_NOT_PASS
  fi
else
    _source_name="http://us.download.nvidia.com/XFree86/Linux-x86_64/$pkgver/NVIDIA-Linux-x86_64-$pkgver.run"
fi

source=($_source_name
        '10-nvidia-drm-outputclass.conf'
        '20-nvidia.conf'
        'nvidia-utils-tkg.sysusers'
        'linux-version.diff' # include linux version
        '01-ipmi-vm.diff' # ipmi & vm patch for older than 415.22 releases (2018.12.7) (396.xx)
        '02-ipmi-vm.diff' # ipmi & vm patch for older than 415.22 releases (2018.12.7) (addon for 410+)
        'list_is_first.diff' # fix for "redefinition of ‘list_is_first’" on <418.56 drivers when used on 5.1+
        'kernel-4.16.patch' # 4.16 workaround
        'kernel-4.19.patch' # 4.19 workaround
        'kernel-5.0.patch' # 5.0 workaround
        'kernel-5.1.patch' # 5.1 workaround
)

msg2 "Selected driver integrity check behavior (md5sum or SKIP): $_md5sum" # If the driver is "known", return md5sum. If it isn't, return SKIP

md5sums=("$_md5sum"
         '768a64259f7e8d8a46a13b876d6c443c'
         '2640eac092c220073f0668a7aaff61f7'
         '3d2894e71d81570bd00bce416d3e547d'
         '7a825f41ada7e106c8c0b713a49b3bfa'
         'd961d1dce403c15743eecfe3201e4b6a'
         '14460615a9d4e247c8d9bcae8776ed48'
         '401859ea7bb4a9864af24ecd67abf34c'
         'adb83cede754daf5adb001f077b1ff67'
         '58d058367934813d29d38328bc3b4dcd'
         '6cff80c311debfdb6b543e575a81820a'
         'a3ce8ebab6506f556f4b222e2372ce87')

if [ $_autoaddpatch == "true" ]; then
  # Auto-add *.patch files from $startdir to source=()
  for _patch in $(find "$startdir" -maxdepth 1 -name '*.patch' -printf "%f\n"); do
    # Don't duplicate already listed ones
    if [[ ! " ${source[@]} " =~ " $_patch " ]]; then  # https://stackoverflow.com/a/15394738/1821548
      source+=("$_patch")
      md5sums+=('SKIP')
    fi
  done
fi

_create_links() {
  # create missing soname links
  for _lib in $(find "$pkgdir" -name '*.so*' | grep -v 'xorg/'); do
    # Get soname/base name
    _soname=$(dirname "$_lib")/$(readelf -d "$_lib" | grep -Po 'SONAME.*: \[\K[^]]*' || true)
    _base=$(echo "$_soname" | sed -r 's/(.*).so.*/\1.so/')

    # Create missing links
    [ -e "$_soname" ] || ln -s $(basename "$_lib") "$_soname"
    [ -e "$_base" ] || ln -s $(basename "$_soname") "$_base"
  done
}

prepare() {
  # Remove previous builds
  [ -d "$_pkg" ] && rm -rf $_pkg

  # Extract
  msg2 "Self-Extracting $_pkg.run..."
  sh $_pkg.run -x
  cd $_pkg

  # linux-rt fix for newer drivers. This just passes the same value regardless of kernel type as a bypass. This was stolen from https://gitlab.manjaro.org/packages/community/realtime-kernels/linux416-rt-extramodules/blob/master/nvidia/PKGBUILD - Thanks Muhownage <3
  sed -i -e 's|PREEMPT_RT_PRESENT=1|PREEMPT_RT_PRESENT=0|g' kernel/conftest.sh

  cp -a kernel kernel-dkms
  cd kernel-dkms
  sed -i "s/__VERSION_STRING/${pkgver}/" dkms.conf
  sed -i 's/__JOBS/`nproc`/' dkms.conf
  sed -i 's/__DKMS_MODULES//' dkms.conf
  sed -i '$iBUILT_MODULE_NAME[0]="nvidia"\
DEST_MODULE_LOCATION[0]="/kernel/drivers/video"\
BUILT_MODULE_NAME[1]="nvidia-uvm"\
DEST_MODULE_LOCATION[1]="/kernel/drivers/video"\
BUILT_MODULE_NAME[2]="nvidia-modeset"\
DEST_MODULE_LOCATION[2]="/kernel/drivers/video"\
BUILT_MODULE_NAME[3]="nvidia-drm"\
DEST_MODULE_LOCATION[3]="/kernel/drivers/video"' dkms.conf

  # Gift for linux-rt guys
  sed -i 's/NV_EXCLUDE_BUILD_MODULES/IGNORE_PREEMPT_RT_PRESENCE=1 NV_EXCLUDE_BUILD_MODULES/' dkms.conf

  cd ../
  bsdtar -xf nvidia-persistenced-init.tar.bz2

  sed -i 's/__NV_VK_ICD__/libGLX_nvidia.so.0/' nvidia_icd.json.template

  # Loop kernels (4.15.0-1-ARCH, 4.14.5-1-ck, ...)
  for _kernel in $(cat /usr/lib/modules/extramodules-*/version); do
    # Use separate source directories
    cp -r kernel kernel-$_kernel

    cd "$srcdir"/"$_pkg"/kernel-$_kernel
      msg2 "Applying linux-version.diff for $_kernel..."
      patch -p2 -i "$srcdir"/linux-version.diff
    cd ..

    # kernel version variables
    if (( $(vercmp "$_kernel" "4.16") >= 0 )); then
      _kernel416="1"
    fi
    if (( $(vercmp "$_kernel" "4.19") >= 0 )); then
      _kernel419="1"
    fi
    if (( $(vercmp "$_kernel" "5.0") >= 0 )); then
      _kernel50="1"
    fi
    if (( $(vercmp "$_kernel" "5.1") >= 0 )); then
      _kernel51="1"
    fi

    # Fix for "unknown type name 'ipmi_user_t'" (required for older than 2018.12.7 drivers when used on 4.20+)
    if (( $(vercmp "$_kernel" "4.20") >= 0 )); then
      if [[ $pkgver = 396* ]] || [[ $pkgver = 410.5* ]] || [[ $pkgver = 410.6* ]] || [[ $pkgver = 410.7* ]] || [[ $pkgver = 415.1* ]]; then
        _oldstuff="1"
        cd "$srcdir"/"$_pkg"/kernel-$_kernel
        msg2 "Applying 01-ipmi-vm.diff for $_kernel..."
        patch -p2 -i "$srcdir"/01-ipmi-vm.diff
        if [[ $pkgver != 396* ]]; then
          _youngeryetoldstuff="1"
          msg2 "Applying 02-ipmi-vm.diff for $_kernel..."
          patch -p2 -i "$srcdir"/02-ipmi-vm.diff
        fi
        cd ..
      else
        msg2 "Skipping ipmi-vm fixes (not needed for this driver/kernel combination)"
      fi
    fi

    if (( $(vercmp "$_kernel" "5.1") >= 0 )); then
      # Temporary place til we get a driver that supports 5.1 OOTB
      sed -i "s/static int nv_drm_vma_fault(struct vm_fault \*vmf)/#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 1, 0)\nstatic int nv_drm_vma_fault(struct vm_fault \*vmf)\n#else\nstatic vm_fault_t nv_drm_vma_fault(struct vm_fault \*vmf)\n#endif/g" "$srcdir/$_pkg/kernel-$_kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c"
      if [[ $pkgver = 396* ]] || [[ $pkgver = 410* ]] || [[ $pkgver == 415* ]] || [[ $pkgver == 418.3* ]] || [[ $pkgver == 418.4* ]]; then
        _low418="1"
        cd "$srcdir"/"$_pkg"/kernel-$_kernel
        msg2 "Applying list_is_first.diff for $_kernel..."
        # Use sed for the moving parts of the patch - Fix for "redefinition of ‘list_is_first’" (required for older than 418.56 drivers when used on 5.1+)
        sed -i "s/static inline int list_is_first(const struct list_head \*list,/#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 1, 0)\nstatic inline int list_is_first(const struct list_head \*list,/g" "$srcdir/$_pkg/kernel-$_kernel/common/inc/nv-list-helpers.h"
        sed -i "s/                                const struct list_head \*head)/                                const struct list_head \*head)\n#else\nstatic inline int nv_list_is_first(const struct list_head \*list,\n                                   const struct list_head \*head)\n#endif/g" "$srcdir/$_pkg/kernel-$_kernel/common/inc/nv-list-helpers.h"
        patch -Np2 -i "$srcdir"/list_is_first.diff
        cd ..
      else
        msg2 "Skipping list_is_first fixes (not needed for this driver/kernel combination)"
      fi
    fi

    # Loop patches (linux-4.15.patch, lol.patch, ...)
    for _p in $(printf -- '%s\n' ${source[@]} | grep .patch); do  # https://stackoverflow.com/a/21058239/1821548
      # Patch version (4.15, "", ...)
      _patch=$(echo $_p | grep -Po "\d+\.\d+")

      # Cd in place
      cd "$srcdir"/"$_pkg"/kernel-$_kernel

      # Compare versions
      if [[ $pkgver != 396* ]] && [ "$_p" == "kernel-4.19.patch" ]; then
        msg2 "Skipping $_p as it doesn't apply to this driver version..."
      elif [[ $pkgver != 396* ]] && [[ $pkgver != 410* ]] && [[ $pkgver != 415* ]] && [ "$_p" == "kernel-5.0.patch" ]; then
        msg2 "Skipping $_p as it doesn't apply to this driver version..."
      elif [[ $pkgver = 418.7* ]] && [ "$_p" == "kernel-5.1.patch" ]; then
        msg2 "Skipping $_p as it doesn't apply to this driver version..."
      elif [ "$_p" == "kernel-4.16.patch" ] || [ "$_p" == "kernel-5.1.patch" ] && [[ $pkgver = 430* ]]; then
        msg2 "Skipping $_p as it doesn't apply to this driver version..."
      else
        if (( $(vercmp "$_kernel" "$_patch") >= 0 )); then
          msg2 "Applying $_p for $_kernel..."
          patch -p2 -i "$srcdir"/$_p
        else
          msg2 "Skipping $_p..."  # List these, instead of ignoring silently
        fi
      fi
    done

    cd ..

  done

  # dkms patches
  if [ "$_dkms" == "true" ]; then
    msg2 "Applying linux-version.diff for dkms..."
    patch -Np1 -i "$srcdir"/linux-version.diff
    if [ "$_kernel416" == "1" ]; then
      if [[ $pkgver = 430* ]]; then
        msg2 "Skipping kernel-4.16.patch as it doesn't apply to this driver version..."
      else
        msg2 "Applying kernel-4.16.patch for dkms..."
        patch -Np1 -i "$srcdir"/kernel-4.16.patch
      fi
    fi
    if [ "$_kernel419" == "1" ]; then
      if [[ $pkgver = 396* ]]; then
        msg2 "Applying kernel-4.19.patch for dkms..."
        patch -Np1 -i "$srcdir"/kernel-4.19.patch
      else
        msg2 "Skipping kernel-4.19.patch as it doesn't apply to this driver version..."
      fi
    fi
    if [ "$_kernel50" == "1" ]; then
      if [[ $pkgver != 396* ]] && [[ $pkgver != 410* ]] && [[ $pkgver != 415* ]]; then
        msg2 "Skipping kernel-5.0.patch as it doesn't apply to this driver version..."
      else
        msg2 "Applying kernel-5.0.patch for dkms..."
        patch -Np1 -i "$srcdir"/kernel-5.0.patch
      fi
    fi
    if [ "$_kernel51" == "1" ]; then
      if [[ $pkgver != 396* ]] && [[ $pkgver != 410* ]] && [[ $pkgver != 415* ]] && [[ $pkgver != 418.3* ]] && [[ $pkgver != 418.4* ]] && [[ $pkgver != 418.5* ]]; then
        msg2 "Skipping kernel-5.1.patch as it doesn't apply to this driver version..."
      else
        msg2 "Applying kernel-5.1.patch for dkms..."
        patch -Np1 -i "$srcdir"/kernel-5.1.patch
        # Temporary place til we get a driver that supports 5.1 OOTB
        sed -i "s/static int nv_drm_vma_fault(struct vm_fault \*vmf)/#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 1, 0)\nstatic int nv_drm_vma_fault(struct vm_fault \*vmf)\n#else\nstatic vm_fault_t nv_drm_vma_fault(struct vm_fault \*vmf)\n#endif/g" "$srcdir/$_pkg/kernel-dkms/nvidia-drm/nvidia-drm-gem-nvkms-memory.c"
      fi
      if [ "$_low418" == "1" ]; then
        msg2 "Applying list_is_first.patch for dkms..."
        # Use sed for the moving parts of the patch - Fix for "redefinition of ‘list_is_first’" (required for older than 418.56 drivers when used on 5.1+)
        sed -i "s/static inline int list_is_first(const struct list_head \*list,/#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 1, 0)\nstatic inline int list_is_first(const struct list_head \*list,/g" "$srcdir/$_pkg/kernel-dkms/common/inc/nv-list-helpers.h"
        sed -i "s/                                const struct list_head \*head)/                                const struct list_head \*head)\n#else\nstatic inline int nv_list_is_first(const struct list_head \*list,\n                                   const struct list_head \*head)\n#endif/g" "$srcdir/$_pkg/kernel-dkms/common/inc/nv-list-helpers.h"
        patch -Np1 -i "$srcdir"/list_is_first.diff
      fi
    fi

    if [ "$_oldstuff" == "1" ]; then
      msg2 "Applying 01-ipmi-vm.diff for dkms..."
      patch -Np1 -i "$srcdir"/01-ipmi-vm.diff
    fi
    if [ "$_youngeryetoldstuff" == "1" ]; then
      msg2 "Applying 02-ipmi-vm.diff for dkms..."
      patch -Np1 -i "$srcdir"/02-ipmi-vm.diff
    fi
  fi
}

build() {
  # Build for all kernels
  for _kernel in $(cat /usr/lib/modules/extramodules-*/version); do
    cd "$srcdir"/$_pkg/kernel-$_kernel

    # Build module
    msg2 "Building Nvidia module for $_kernel..."
    make SYSSRC=/usr/lib/modules/$_kernel/build modules
  done
}

package_opencl-nvidia-tkg() {
  pkgdesc="NVIDIA's OpenCL implemention for 'nvidia-utils-tkg'"
  depends=('zlib')
  optdepends=('opencl-headers: headers necessary for OpenCL development')
  provides=("opencl-nvidia=$pkgver" 'opencl-driver')
  conflicts=('opencl-nvidia')
  cd $_pkg

  # OpenCL
  install -Dm644 nvidia.icd "$pkgdir"/etc/OpenCL/vendors/nvidia.icd
  install -Dm755 libnvidia-compiler.so.$pkgver "$pkgdir"/usr/lib/libnvidia-compiler.so.$pkgver
  install -Dm755 libnvidia-opencl.so.$pkgver "$pkgdir"/usr/lib/libnvidia-opencl.so.$pkgver

  # create missing soname links
  _create_links

  # License (link)
  install -d "$pkgdir"/usr/share/licenses/
  ln -s nvidia/ "$pkgdir"/usr/share/licenses/opencl-nvidia
}

package_nvidia-egl-wayland-tkg() {
  pkgdesc="NVIDIA EGL Wayland library (libnvidia-egl-wayland.so.1.1.0) for 'nvidia-utils-tkg'"
  depends=('nvidia-utils-tkg')
  provides=('egl-wayland')
  conflicts=('egl-wayland')
  cd $_pkg

  if [[ $pkgver == 396* ]]; then
    install -Dm755 libnvidia-egl-wayland.so.1.0.3 "$pkgdir"/usr/lib/libnvidia-egl-wayland.so.1.0.3
    ln -s libnvidia-egl-wayland.so.1.0.3 "$pkgdir"/usr/lib/libnvidia-egl-wayland.so.1
  elif [[ $pkgver == 410* ]] || [[ $pkgver == 415* ]]; then
    install -Dm755 libnvidia-egl-wayland.so.1.1.0 "$pkgdir"/usr/lib/libnvidia-egl-wayland.so.1.1.0
    ln -s libnvidia-egl-wayland.so.1.1.0 "$pkgdir"/usr/lib/libnvidia-egl-wayland.so.1
  else
    install -Dm755 libnvidia-egl-wayland.so.1.1.2 "$pkgdir"/usr/lib/libnvidia-egl-wayland.so.1.1.2
    ln -s libnvidia-egl-wayland.so.1.1.2 "$pkgdir"/usr/lib/libnvidia-egl-wayland.so.1
  fi
}

package_nvidia-utils-tkg() {
  pkgdesc="NVIDIA driver utilities and libraries for 'nvidia-tkg'"
  depends=('xorg-server' 'libglvnd' 'mesa>=17.0.2-2')
  optdepends=('gtk2: nvidia-settings (GTK+ v2)'
              'gtk3: nvidia-settings (GTK+ v3)'
              'opencl-nvidia-tkg: OpenCL support'
              'xorg-server-devel: nvidia-xconfig'
              'egl-wayland-git: for alternative, more advanced Wayland library (libnvidia-egl-wayland.so.1.1.0)')
  provides=("nvidia-utils=$pkgver" "nvidia-settings=$pkgver" 'vulkan-driver' 'opengl-driver' 'nvidia-libgl')
  conflicts=('nvidia-utils' 'nvidia-settings' 'nvidia-libgl')
  backup=('etc/X11/xorg.conf.d/20-nvidia.conf')
  install=nvidia-utils-tkg.install
  cd $_pkg

    # X driver
    install -D -m755 nvidia_drv.so "${pkgdir}/usr/lib/xorg/modules/drivers/nvidia_drv.so"

    if [[ $pkgver == 396* ]]; then
      # GLX extension module for X
      install -D -m755 "libglx.so.${pkgver}" "${pkgdir}/usr/lib/nvidia/xorg/libglx.so.${pkgver}"
      ln -s "libglx.so.${pkgver}" "${pkgdir}/usr/lib/nvidia/xorg/libglx.so.1"	# X doesn't find glx otherwise
      ln -s "libglx.so.${pkgver}" "${pkgdir}/usr/lib/nvidia/xorg/libglx.so"	# X doesn't find glx otherwise
    else
      # GLX extension module for X
      install -D -m755 "libglxserver_nvidia.so.${pkgver}" "${pkgdir}/usr/lib/nvidia/xorg/libglxserver_nvidia.so.${pkgver}"
      # Ensure that X finds glx
      ln -s "libglxserver_nvidia.so.${pkgver}" "${pkgdir}/usr/lib/nvidia/xorg/libglxserver_nvidia.so.1"
      ln -s "libglxserver_nvidia.so.${pkgver}" "${pkgdir}/usr/lib/nvidia/xorg/libglxserver_nvidia.so"
    fi

    if [[ $pkgver == 418* ]] || [[ $pkgver == 430* ]]; then
      # optical flow
      install -D -m755 "libnvidia-opticalflow.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-opticalflow.so.${pkgver}"
    else
      # X wrapped software rendering
      install -D -m755 "libnvidia-wfb.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-wfb.so.${pkgver}"
    fi

    install -D -m755 "libGLX_nvidia.so.${pkgver}" "${pkgdir}/usr/lib/libGLX_nvidia.so.${pkgver}"

    # OpenGL libraries
    install -D -m755 "libEGL_nvidia.so.${pkgver}" "${pkgdir}/usr/lib/libEGL_nvidia.so.${pkgver}"
    install -D -m755 "libGLESv1_CM_nvidia.so.${pkgver}" "${pkgdir}/usr/lib/libGLESv1_CM_nvidia.so.${pkgver}"
    install -D -m755 "libGLESv2_nvidia.so.${pkgver}" "${pkgdir}/usr/lib/libGLESv2_nvidia.so.${pkgver}"
    install -D -m644 "10_nvidia.json" "${pkgdir}/usr/share/glvnd/egl_vendor.d/10_nvidia.json"

    # OpenGL core library
    install -D -m755 "libnvidia-glcore.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-glcore.so.${pkgver}"
    install -D -m755 "libnvidia-eglcore.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-eglcore.so.${pkgver}"
    install -D -m755 "libnvidia-glsi.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-glsi.so.${pkgver}"

    # misc
    install -D -m755 "libnvidia-ifr.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-ifr.so.${pkgver}"
    install -D -m755 "libnvidia-fbc.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-fbc.so.${pkgver}"
    install -D -m755 "libnvidia-encode.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-encode.so.${pkgver}"
    install -D -m755 "libnvidia-cfg.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-cfg.so.${pkgver}"
    install -D -m755 "libnvidia-ml.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-ml.so.${pkgver}"
    install -D -m755 "libnvidia-glvkspirv.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-glvkspirv.so.${pkgver}"

    if [[ $pkgver != 396* ]]; then
      # Ray tracing
      install -D -m755 "libnvoptix.so.${pkgver}" "${pkgdir}/usr/lib/libnvoptix.so.${pkgver}"
      install -D -m755 "libnvidia-rtcore.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-rtcore.so.${pkgver}"
      install -D -m755 "libnvidia-cbl.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-cbl.so.${pkgver}"
    fi

    # Vulkan ICD
    install -D -m644 "nvidia_icd.json.template" "${pkgdir}/usr/share/vulkan/icd.d/nvidia_icd.json"

    # VDPAU
    install -D -m755 "libvdpau_nvidia.so.${pkgver}" "${pkgdir}/usr/lib/vdpau/libvdpau_nvidia.so.${pkgver}"

    # nvidia-tls library
    install -D -m755 "libnvidia-tls.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-tls.so.${pkgver}"

    if [[ $pkgver == 396* ]] || [[ $pkgver == 410* ]]; then
      install -D -m755 "tls/libnvidia-tls.so.${pkgver}" "${pkgdir}/usr/lib/tls/libnvidia-tls.so.${pkgver}"
    fi

    # CUDA
    install -D -m755 "libcuda.so.${pkgver}" "${pkgdir}/usr/lib/libcuda.so.${pkgver}"
    install -D -m755 "libnvcuvid.so.${pkgver}" "${pkgdir}/usr/lib/libnvcuvid.so.${pkgver}"

    # PTX JIT Compiler (Parallel Thread Execution (PTX) is a pseudo-assembly language for CUDA)
    install -D -m755 "libnvidia-ptxjitcompiler.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-ptxjitcompiler.so.${pkgver}"

    # Fat (multiarchitecture) binary loader
    install -D -m755 "libnvidia-fatbinaryloader.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-fatbinaryloader.so.${pkgver}"

    # DEBUG
    install -D -m755 nvidia-debugdump "${pkgdir}/usr/bin/nvidia-debugdump"

    # nvidia-xconfig
    install -D -m755 nvidia-xconfig "${pkgdir}/usr/bin/nvidia-xconfig"
    install -D -m644 nvidia-xconfig.1.gz "${pkgdir}/usr/share/man/man1/nvidia-xconfig.1.gz"

    # nvidia-bug-report
    install -D -m755 nvidia-bug-report.sh "${pkgdir}/usr/bin/nvidia-bug-report.sh"

    # nvidia-smi
    install -D -m755 nvidia-smi "${pkgdir}/usr/bin/nvidia-smi"
    install -D -m644 nvidia-smi.1.gz "${pkgdir}/usr/share/man/man1/nvidia-smi.1.gz"

    # nvidia-cuda-mps
    install -D -m755 nvidia-cuda-mps-server "${pkgdir}/usr/bin/nvidia-cuda-mps-server"
    install -D -m755 nvidia-cuda-mps-control "${pkgdir}/usr/bin/nvidia-cuda-mps-control"
    install -D -m644 nvidia-cuda-mps-control.1.gz "${pkgdir}/usr/share/man/man1/nvidia-cuda-mps-control.1.gz"

    # nvidia-modprobe
    # This should be removed if nvidia fixed their uvm module!
    install -D -m4755 nvidia-modprobe "${pkgdir}/usr/bin/nvidia-modprobe"
    install -D -m644 nvidia-modprobe.1.gz "${pkgdir}/usr/share/man/man1/nvidia-modprobe.1.gz"

    # nvidia-persistenced
    install -D -m755 nvidia-persistenced "${pkgdir}/usr/bin/nvidia-persistenced"
    install -D -m644 nvidia-persistenced.1.gz "${pkgdir}/usr/share/man/man1/nvidia-persistenced.1.gz"
    install -D -m644 nvidia-persistenced-init/systemd/nvidia-persistenced.service.template "${pkgdir}/usr/lib/systemd/system/nvidia-persistenced.service"
    sed -i 's/__USER__/nvidia-persistenced/' "${pkgdir}/usr/lib/systemd/system/nvidia-persistenced.service"

    # application profiles
    install -D -m644 nvidia-application-profiles-${pkgver}-rc "${pkgdir}/usr/share/nvidia/nvidia-application-profiles-${pkgver}-rc"
    install -D -m644 nvidia-application-profiles-${pkgver}-key-documentation "${pkgdir}/usr/share/nvidia/nvidia-application-profiles-${pkgver}-key-documentation"

    install -D -m644 LICENSE "${pkgdir}/usr/share/licenses/nvidia-utils/LICENSE"
    install -D -m644 README.txt "${pkgdir}/usr/share/doc/nvidia/README"
    install -D -m644 NVIDIA_Changelog "${pkgdir}/usr/share/doc/nvidia/NVIDIA_Changelog"
    cp -r html "${pkgdir}/usr/share/doc/nvidia/"
    ln -s nvidia "${pkgdir}/usr/share/doc/nvidia-utils"

    # GTK+ for nvidia-settings
    install -D -m755 "libnvidia-gtk2.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-gtk2.so.${pkgver}"
    install -D -m755 "libnvidia-gtk3.so.${pkgver}" "${pkgdir}/usr/lib/libnvidia-gtk3.so.${pkgver}"

    # GUI for configuring the driver
    install -Dm755 nvidia-settings "$pkgdir"/usr/bin/nvidia-settings
    install -Dm644 nvidia-settings.1.gz "$pkgdir"/usr/share/man/man1/nvidia-settings.1.gz
    install -Dm644 nvidia-settings.png "$pkgdir"/usr/share/pixmaps/nvidia-settings.png
    install -Dm644 nvidia-settings.desktop "$pkgdir"/usr/share/applications/nvidia-settings.desktop
    sed -e 's:__UTILS_PATH__:/usr/bin:' \
        -e 's:__PIXMAP_PATH__:/usr/share/pixmaps:' \
        -i "$pkgdir"/usr/share/applications/nvidia-settings.desktop

    # Disable logo splash
    install -Dm644 "$srcdir"/20-nvidia.conf "$pkgdir"/etc/X11/xorg.conf.d/20-nvidia.conf

    # Distro-specific files must be installed in /usr/share/X11/xorg.conf.d
    install -Dm644 "$srcdir"/10-nvidia-drm-outputclass.conf "$pkgdir"/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf

    install -Dm644 "$srcdir"/nvidia-utils-tkg.sysusers "$pkgdir"/usr/lib/sysusers.d/$pkgname.conf

    _create_links
}

if [ "$_dkms" == "false" ]; then
  package_nvidia-tkg() {
    pkgdesc="Full NVIDIA drivers' package for all kernels on the system (drivers and shared utilities and libraries)"
    depends=("nvidia-utils-tkg>=$pkgver" 'libglvnd')
    provides=("nvidia=$pkgver")
    conflicts=('nvidia-96xx' 'nvidia-173xx' 'nvidia')
    install=nvidia-tkg.install

    # Install for all kernels
    for _path in $(find /usr/lib/modules/extramodules-*/version -printf '%h\n'); do
      _extramodules=$(cat $_path/version)

      # Nvidia kernel module; provides low-level access to your NVIDIA hardware for the other components. Generally
      # loaded into the kernel when the X server is started, to be used by the X driver and OpenGL. Consists of two
      # pieces: the binary-only core, and a kernel interface that must be compiled specifically for your kernel version,
      # because the Linux kernel doesn't have a consistent binary interface like the X server.
      install -Dm644 $_pkg/kernel-$_extramodules/nvidia.ko \
             "$pkgdir"/$_path/nvidia.ko

      # NVIDIA Unified Memory kernel module; provides functionality for sharing memory between the CPU and GPU in
      # CUDA programs. Generally loaded into the kernel when a CUDA program is started, and used by the CUDA
      # driver on supported platforms: http://devblogs.nvidia.com/parallelforall/unified-memory-in-cuda-6/
      install -Dm644 $_pkg/kernel-$_extramodules/nvidia-uvm.ko \
             "$pkgdir"/$_path/nvidia-uvm.ko

      # Kernel module responsible for programming the display engine of the GPU. User-mode NVIDIA driver components
      # such as the NVIDIA X driver, OpenGL driver, and VDPAU driver communicate with nvidia-modeset.ko through the
      # /dev/nvidia-modeset device file.
      install -Dm644 $_pkg/kernel-$_extramodules/nvidia-modeset.ko \
             "$pkgdir"/$_path/nvidia-modeset.ko

      # NVIDIA DRM kernel module; registers as a DRM driver to provide GEM and PRIME DRM capabilities
      # for atomic DRM KMS and graphics display offload on Optimus notebooks:
      # https://devtalk.nvidia.com/default/topic/925605/linux/nvidia-364-12-release-vulkan-glvnd-drm-kms-and-eglstreams/
      install -Dm644 $_pkg/kernel-$_extramodules/nvidia-drm.ko \
             "$pkgdir"/$_path/nvidia-drm.ko

      # Compress
      gzip "$pkgdir"/$_path/nvidia*.ko
    done

  # Blacklist Nouveau
  mkdir -p "${pkgdir}/usr/lib/modprobe.d"
  echo -e "blacklist nouveau\nblacklist nvidiafb" > "${pkgdir}/usr/lib/modprobe.d/${pkgname}.conf"

  rm -v ${where}/options
  }
fi

package_lib32-opencl-nvidia-tkg() {
  pkgdesc="NVIDIA's OpenCL implemention for 'lib32-nvidia-utils-tkg' "
  depends=('lib32-zlib' 'lib32-gcc-libs')
  optdepends=('opencl-headers: headers necessary for OpenCL development')
  provides=("lib32-opencl-nvidia=$pkgver" 'lib32-opencl-driver')
  conflicts=('lib32-opencl-nvidia')
  cd $_pkg/32

  # OpenCL
  install -D -m755 libnvidia-compiler.so.$pkgver "$pkgdir"/usr/lib32/libnvidia-compiler.so.$pkgver
  install -D -m755 libnvidia-opencl.so.$pkgver "$pkgdir"/usr/lib32/libnvidia-opencl.so.$pkgver

  # create missing soname links
  _create_links

  # License (link)
  install -d "$pkgdir"/usr/share/licenses/
  ln -s nvidia-utils/ "$pkgdir"/usr/share/licenses/lib32-opencl-nvidia
}

package_lib32-nvidia-utils-tkg() {
  pkgdesc="NVIDIA driver utilities and libraries for 'nvidia-tkg' (32-bit)"
  depends=('lib32-zlib' 'lib32-gcc-libs' 'nvidia-utils-tkg' 'lib32-libglvnd' 'lib32-mesa>=17.0.2-1')
  optdepends=('lib32-opencl-nvidia-tkg: OpenCL support')
  provides=("lib32-nvidia-utils=$pkgver" 'lib32-vulkan-driver' 'lib32-opengl-driver' 'lib32-nvidia-libgl')
  conflicts=('lib32-nvidia-utils' 'lib32-nvidia-libgl')
  cd $_pkg/32

    install -D -m755 "libGLX_nvidia.so.${pkgver}" "${pkgdir}/usr/lib32/libGLX_nvidia.so.${pkgver}"

    # OpenGL libraries
    install -D -m755 "libEGL_nvidia.so.${pkgver}" "${pkgdir}/usr/lib32/libEGL_nvidia.so.${pkgver}"
    install -D -m755 "libGLESv1_CM_nvidia.so.${pkgver}" "${pkgdir}/usr/lib32/libGLESv1_CM_nvidia.so.${pkgver}"
    install -D -m755 "libGLESv2_nvidia.so.${pkgver}" "${pkgdir}/usr/lib32/libGLESv2_nvidia.so.${pkgver}"

    # OpenGL core library
    install -D -m755 "libnvidia-glcore.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-glcore.so.${pkgver}"
    install -D -m755 "libnvidia-eglcore.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-eglcore.so.${pkgver}"
    install -D -m755 "libnvidia-glsi.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-glsi.so.${pkgver}"

    # misc
    install -D -m755 "libnvidia-ifr.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-ifr.so.${pkgver}"
    install -D -m755 "libnvidia-fbc.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-fbc.so.${pkgver}"
    install -D -m755 "libnvidia-encode.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-encode.so.${pkgver}"
    install -D -m755 "libnvidia-ml.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-ml.so.${pkgver}"
    install -D -m755 "libnvidia-glvkspirv.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-glvkspirv.so.${pkgver}"

    # VDPAU
    install -D -m755 "libvdpau_nvidia.so.${pkgver}" "${pkgdir}/usr/lib32/vdpau/libvdpau_nvidia.so.${pkgver}"

    # nvidia-tls library
    install -D -m755 "libnvidia-tls.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-tls.so.${pkgver}"

    if [[ $pkgver == 396* ]] || [[ $pkgver == 410* ]]; then
      install -D -m755 "tls/libnvidia-tls.so.${pkgver}" "${pkgdir}/usr/lib32/tls/libnvidia-tls.so.${pkgver}"
    fi

    # CUDA
    install -D -m755 "libcuda.so.${pkgver}" "${pkgdir}/usr/lib32/libcuda.so.${pkgver}"
    install -D -m755 "libnvcuvid.so.${pkgver}" "${pkgdir}/usr/lib32/libnvcuvid.so.${pkgver}"

    # PTX JIT Compiler (Parallel Thread Execution (PTX) is a pseudo-assembly language for CUDA)
    install -D -m755 "libnvidia-ptxjitcompiler.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-ptxjitcompiler.so.${pkgver}"

    # Fat (multiarchitecture) binary loader
    install -D -m755 "libnvidia-fatbinaryloader.so.${pkgver}" "${pkgdir}/usr/lib32/libnvidia-fatbinaryloader.so.${pkgver}"

    _create_links

    rm -rf "${pkgdir}"/usr/{include,share,bin}
    mkdir -p "${pkgdir}/usr/share/licenses"
    ln -s nvidia-utils/ "${pkgdir}/usr/share/licenses/${pkgname}"
}

if [ "$_dkms" == "true" ]; then
  package_nvidia-dkms-tkg() {
    pkgdesc="NVIDIA kernel module sources (DKMS)"
    depends=('dkms' "nvidia-utils-tkg>=${pkgver}" 'nvidia-libgl')
    provides=("nvidia=${pkgver}" 'nvidia-dkms')
    conflicts=('nvidia')

    cd ${_pkg}
    install -dm 755 "${pkgdir}"/usr/{lib/modprobe.d,src}
    cp -dr --no-preserve='ownership' kernel-dkms "${pkgdir}/usr/src/nvidia-${pkgver}"

    # Blacklist Nouveau
    mkdir -p "${pkgdir}/usr/lib/modprobe.d"
    echo -e "blacklist nouveau\nblacklist nvidiafb" > "${pkgdir}/usr/lib/modprobe.d/${pkgname}.conf"

    install -Dt "${pkgdir}/usr/share/licenses/${pkgname}" -m644 "${srcdir}/${_pkg}/LICENSE"

    rm -fv "${where}"/options
  }
fi

function exit_cleanup {
  # Sanitization
  rm -f "${where}"/options
  rm -f "${where}"/*.conf
  rm -f "${where}"/*.install
  rm -f "${where}"/*.patch
  rm -f "${where}"/*.diff
  rm -f "${where}"/nvidia-utils-tkg.sysusers
  rm -rf "${where}"/src/*

  remove_deps

  msg2 'exit cleanup done'
}

trap exit_cleanup EXIT
